<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪山上的蒲公英</title>
  
  <subtitle>JinFeng&#39;s Blog</subtitle>
  <link href="https://xssdpgy.github.io/atom.xml" rel="self"/>
  
  <link href="https://xssdpgy.github.io/"/>
  <updated>2023-03-02T15:53:11.943Z</updated>
  <id>https://xssdpgy.github.io/</id>
  
  <author>
    <name>Zang JinFeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法记录（一）——单链表解题技巧</title>
    <link href="https://xssdpgy.github.io/2023/03/02/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%8D%95%E9%93%BE%E8%A1%A8%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A7/"/>
    <id>https://xssdpgy.github.io/2023/03/02/%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%8D%95%E9%93%BE%E8%A1%A8%E8%A7%A3%E9%A2%98%E6%8A%80%E5%B7%A7/</id>
    <published>2023-03-02T14:40:02.000Z</published>
    <updated>2023-03-02T15:53:11.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="https://leetcode.cn/problems/linked-list-cycle">141. 环形链表 🟢</a></li><li><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II🟠</a></li><li><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists">160. 相交链表 🟢</a></li><li><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list">19. 删除链表的倒数第 N 个结点 🟠</a></li><li><a href="https://leetcode.cn/problems/merge-two-sorted-lists">21. 合并两个有序链表 🟢</a></li><li><a href="https://leetcode.cn/problems/merge-k-sorted-lists">23. 合并K个升序链表 🔴</a></li><li><a href="https://leetcode.cn/problems/partition-list">86. 分隔链表 🟠</a></li><li><a href="https://leetcode.cn/problems/middle-of-the-linked-list">876. 链表的中间结点 🟢</a></li><li><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof">剑指 Offer 22. 链表中倒数第k个节点 🟢</a></li><li><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof">剑指 Offer 25. 合并两个排序的链表 🟢</a></li><li><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof">剑指 Offer 52. 两个链表的第一个公共节点 🟢</a></li><li><a href="https://leetcode.cn/problems/SLwz0R">剑指 Offer II 021. 删除链表的倒数第 n 个结点 🟠</a></li><li><a href="https://leetcode.cn/problems/c32eOV">剑指 Offer II 022. 链表中环的入口节点 🟠</a></li><li><a href="https://leetcode.cn/problems/3u1WK4">剑指 Offer II 023. 两个链表的第一个重合节点 🟢</a></li><li><a href="https://leetcode.cn/problems/vvXgSW">剑指 Offer II 078. 合并排序链表 🔴</a></li></ul><h2 id="单链表的数据结构"><a href="#单链表的数据结构" class="headerlink" title="单链表的数据结构"></a>单链表的数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">      <span class="type">int</span> val;</span><br><span class="line">      ListNode next;</span><br><span class="line">      ListNode(<span class="type">int</span> x) &#123;</span><br><span class="line">          val = x;</span><br><span class="line">          next = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141 环形链表"></a>141 环形链表</h2><p>题目：<a href="https://leetcode.cn/problems/linked-list-cycle">141. 环形链表 🟢</a></p><p>思路：判断链表中是否存在环，使用双指针，快慢指针，相交即为存在环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ListNode slow,fast;</span><br><span class="line">    slow = head;</span><br><span class="line">    fast = head;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="comment">//快慢指针相交即为存在环</span></span><br><span class="line">        <span class="keyword">if</span>(slow==fast)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表二"><a href="#142-环形链表二" class="headerlink" title="142 环形链表二"></a>142 环形链表二</h2><p>题目：<a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II🟠</a></p><p>思路：基于 <a href="https://leetcode.cn/problems/linked-list-cycle">141. 环形链表</a> 的解法，直观地来说就是当快慢指针相遇时，让其中任一个指针指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230302231644713.png" alt="image-20230302231644713"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        ListNode fast,slow;</span><br><span class="line">        fast = head;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast !=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="comment">//快慢指针相交，中断前进</span></span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//快指针next节点为空的话，说明链表无环</span></span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="literal">null</span>||fast.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时慢指针重新指向头节点</span></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="comment">//快慢指针同步前进，等待相交点即为环的入口</span></span><br><span class="line">        <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160 相交链表"></a>160 相交链表</h2><p>题目：<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists">160. 相交链表 🟢</a></p><p>思路：难点在于链表长度不同，因此到达相交节点的步数也不同，因此通过拼接，让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让 <code>p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表 <code>A</code>，这样相当于「逻辑上」两条链表接在了一起，以让 <code>p1</code> 和 <code>p2</code> 同时进入相交节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> headA,p2 = headB;</span><br><span class="line">    <span class="keyword">while</span>(p1!=p2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//p1到尽头，指针转向headB</span></span><br><span class="line">            p1 = headB;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//p2到尽头，指针转向headA</span></span><br><span class="line">            p2 = headA;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p1==p2即为相交节点</span></span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/linked-list-cycle&quot;&gt;141. 环形链表 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/linked-list-cycle-ii/&quot;&gt;142. 环形链表 II🟠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/intersection-of-two-linked-lists&quot;&gt;160. 相交链表 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-nth-node-from-end-of-list&quot;&gt;19. 删除链表的倒数第 N 个结点 🟠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-two-sorted-lists&quot;&gt;21. 合并两个有序链表 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/merge-k-sorted-lists&quot;&gt;23. 合并K个升序链表 🔴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/partition-list&quot;&gt;86. 分隔链表 🟠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/middle-of-the-linked-list&quot;&gt;876. 链表的中间结点 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof&quot;&gt;剑指 Offer 22. 链表中倒数第k个节点 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof&quot;&gt;剑指 Offer 25. 合并两个排序的链表 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof&quot;&gt;剑指 Offer 52. 两个链表的第一个公共节点 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/SLwz0R&quot;&gt;剑指 Offer II 021. 删除链表的倒数第 n 个结点 🟠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/c32eOV&quot;&gt;剑指 Offer II 022. 链表中环的入口节点 🟠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/3u1WK4&quot;&gt;剑指 Offer II 023. 两个链表的第一个重合节点 🟢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/vvXgSW&quot;&gt;剑指 Offer II 078. 合并排序链表 🔴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单链表的数据结构&quot;&gt;&lt;a href=&quot;#单链表的数据结构&quot; class=&quot;headerlink&quot; title=&quot;单链表的数据结构&quot;&gt;&lt;/a&gt;单链表的数据结构&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ListNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ListNode next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ListNode(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          val = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          next = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;141-环形链表&quot;&gt;&lt;a href=&quot;#141-环形链表&quot; class=&quot;headerlink&quot; title=&quot;141 环形链表&quot;&gt;&lt;/a&gt;141 环形链表&lt;/h2&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="算法" scheme="https://xssdpgy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="https://xssdpgy.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java的7种阻塞队列及其实现原理</title>
    <link href="https://xssdpgy.github.io/2023/02/27/Java%E7%9A%847%E7%A7%8D%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://xssdpgy.github.io/2023/02/27/Java%E7%9A%847%E7%A7%8D%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-27T14:50:55.000Z</published>
    <updated>2023-02-28T14:16:22.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列和阻塞队列"><a href="#队列和阻塞队列" class="headerlink" title="队列和阻塞队列"></a>队列和阻塞队列</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列（<code>Queue</code>）是一种经常使用的集合。<code>Queue</code> 实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。和 List、Set 一样都继承自 Collection。它和 <code>List</code> 的区别在于，<code>List</code>可以在任意位置添加和删除元素，而<code>Queue</code> 只有两个操作：</p><ul><li>把元素添加到队列末尾；</li><li>从队列头部取出元素。</li></ul><span id="more"></span><p>超市的收银台就是一个队列：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/qdn5n1vv5d.jpeg"></p><p>我们常用的 LinkedList 就可以当队列使用，实现了 Dequeue 接口，还有 ConcurrentLinkedQueue，他们都属于非阻塞队列。</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>阻塞队列，顾名思义，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/r2azmfcxl0.jpeg"></p><p>线程 1 往阻塞队列中添加元素，而线程 2 从阻塞队列中移除元素</p><ul><li>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞。</li><li>当阻塞队列是满时，从队列中添加元素的操作将会被阻塞。</li></ul><p>试图从空的阻塞队列中获取元素的线程将会阻塞，直到其他的线程往空的队列插入新的元素，同样，试图往已满的阻塞队列添加新元素的线程同样也会阻塞，直到其他的线程从列中移除一个或多个元素或者完全清空队列后继续新增。</p><blockquote><p>类似我们去海底捞排队，海底捞爆满情况下，阻塞队列相当于用餐区，用餐区满了的话，就阻塞在候客区等着，可以用餐的话 put 一波去用餐，吃完就 take 出去。</p></blockquote><h1 id="为什么要用阻塞队列"><a href="#为什么要用阻塞队列" class="headerlink" title="为什么要用阻塞队列"></a>为什么要用阻塞队列</h1><p>在多线程领域：所谓阻塞，是指在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒。</p><p><strong>那为什么需要 BlockingQueue 呢</strong></p><p>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这些 BlockingQueue 都包办了。</p><p>在 concurrent 包发布以前，多线程环境下，我们每个程序员都必须自己去实现这些细节，尤其还要兼顾效率和线程安全，这会给我们的程序带来不小的复杂性。现在有了阻塞队列，我们的操作就从手动挡换成了自动挡。</p><h2 id="Java里的阻塞队列"><a href="#Java里的阻塞队列" class="headerlink" title="Java里的阻塞队列"></a>Java里的阻塞队列</h2><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/vzgecykzwz.jpeg" alt="img"></p><p>Collection的子类除了我们熟悉的 List 和 Set，还有一个 Queue，阻塞队列 BlockingQueue 继承自 Queue。</p><p>BlockingQueue 是个接口，需要使用它的实现之一来使用 BlockingQueue，<code>java.util.concurrent</code> 包下具有以下 BlockingQueue 接口的实现类：</p><p>JDK 提供了 7 个阻塞队列。分别是：</p><ul><li>ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列</li><li>LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列</li><li>PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列</li><li>DelayQueue：一个使用优先级队列实现的无界阻塞队列</li><li>SynchronousQueue：一个不存储元素的阻塞队列</li><li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列（实现了继承于 BlockingQueue 的 TransferQueue）</li><li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列</li></ul><h2 id="BlockingQueue核心方法"><a href="#BlockingQueue核心方法" class="headerlink" title="BlockingQueue核心方法"></a>BlockingQueue核心方法</h2><p>相比 Queue 接口，BlockingQueue 有四种形式的 API。</p><table><thead><tr><th align="left">方法类型</th><th align="left">抛出异常</th><th align="left">返回特殊值</th><th align="left">一直阻塞</th><th align="left">超时退出</th></tr></thead><tbody><tr><td align="left">插入</td><td align="left">add(e)</td><td align="left">offer(e)</td><td align="left">put(e)</td><td align="left">offer(e,time,unit)</td></tr><tr><td align="left">移除（取出）</td><td align="left">remove()</td><td align="left">poll()</td><td align="left">take()</td><td align="left">poll(time,unit)</td></tr><tr><td align="left">检查</td><td align="left">element()</td><td align="left">peek()</td><td align="left">不可用</td><td align="left">不可用</td></tr></tbody></table><p>以 ArrayBlockingQueue 为例来看下 Java 阻塞队列提供的常用方法</p><ul><li>抛出异常：</li><li>当阻塞队列满时，再往队列里 add 插入元素会抛出 <code>java.lang.IllegalStateException: Queue full</code> 异常；</li><li>当队列为空时，从队列里 remove 移除元素时会抛出 <code>NoSuchElementException</code> 异常 。</li><li>element()，返回队列头部的元素，如果队列为空，则抛出一个 <code>NoSuchElementException</code> 异常</li></ul><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/tfke4xk80a.png"></p><ul><li>返回特殊值：</li><li>offer()，插入方法，成功返回 true，失败返回 false；</li><li>poll()，移除方法，成功返回出队列的元素，队列里没有则返回 null</li><li>peek() ，返回队列头部的元素，如果队列为空，则返回 null</li></ul><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/lnfymgac35.png"></p><ul><li>一直阻塞：</li><li>当阻塞队列满时，如果生产线程继续往队列里 put 元素，队列会一直阻塞生产线程，直到拿到数据，或者响应中断退出；</li><li>当阻塞队列空时，消费线程试图从队列里 take 元素，队列也会一直阻塞消费线程，直到队列可用。</li></ul><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/ztrwqquuix.png"></p><ul><li>超时退出：</li><li>当阻塞队列满时，队列会阻塞生产线程一定时间，如果超过一定的时间，生产线程就会退出，返回 false</li><li>当阻塞队列空时，队列会阻塞消费线程一定时间，如果超过一定的时间，消费线程会退出，返回 null</li></ul><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/n7m9mhh1b1.png"></p><h1 id="BlockingQueue-实现类"><a href="#BlockingQueue-实现类" class="headerlink" title="BlockingQueue 实现类"></a>BlockingQueue 实现类</h1><p>逐个分析下这 7 个阻塞队列，常用的几个顺便探究下源码。</p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>ArrayBlockingQueue，一个由<strong>数组</strong>实现的<strong>有界</strong>阻塞队列。该队列采用先进先出（FIFO）的原则对元素进行排序添加的。</p><p>ArrayBlockingQueue 为<strong>有界且固定</strong>，其大小在构造时由构造函数来决定，确认之后就不能再改变了。</p><p>ArrayBlockingQueue 支持对等待的生产者线程和使用者线程进行排序的可选公平策略，但是在默认情况下不保证线程公平的访问，在构造时可以选择公平策略（<code>fair = true</code>）。公平性通常会降低吞吐量，但是减少了可变性和避免了“不平衡性”。（ArrayBlockingQueue 内部的阻塞队列是通过 ReentrantLock 和 Condition 条件队列实现的， 所以 ArrayBlockingQueue 中的元素存在公平和非公平访问的区别）</p><p>所谓公平访问队列是指阻塞的所有生产者线程或消费者线程，当队列可用时，可以按照阻塞的先后顺序访问队列，即先阻塞的生产者线程，可以先往队列里插入元素，先阻塞的消费者线程，可以先从队列里获取元素，可以保证先进先出，避免饥饿现象。</p><p><strong>源码解读</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBlockingQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过数组来实现的队列</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items;</span><br><span class="line">    <span class="comment">//记录队首元素的下标</span></span><br><span class="line">    <span class="type">int</span> takeIndex;</span><br><span class="line">    <span class="comment">//记录队尾元素的下标</span></span><br><span class="line">    <span class="type">int</span> putIndex;</span><br><span class="line">    <span class="comment">//队列中的元素个数</span></span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//通过ReentrantLock来实现同步</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line">    <span class="comment">//有2个条件对象，分别表示队列不为空和队列不满的情况</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="keyword">transient</span> Itrs itrs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//offer方法用于向队列中添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="comment">// 可以看出添加的数据不支持null值</span></span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        <span class="comment">//通过重入锁来实现同步</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//如果队列已经满了的话直接就返回false，不会阻塞调用这个offer方法的线程</span></span><br><span class="line">            <span class="keyword">if</span> (count == items.length)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//如果队列没有满，就调用enqueue方法将元素添加到队列中</span></span><br><span class="line">                enqueue(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多了个等待时间的 offer方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e, <span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        <span class="comment">//获取可中断锁</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == items.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//等待设置的时间</span></span><br><span class="line">                nanos = notFull.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//如果等待时间过了，队列有空间的话就会调用enqueue方法将元素添加到队列</span></span><br><span class="line">            enqueue(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据添加到队列中的具体方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(E x)</span> &#123;</span><br><span class="line">        <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">        <span class="comment">// assert items[putIndex] == null;</span></span><br><span class="line">        <span class="keyword">final</span> Object[] items = <span class="built_in">this</span>.items;</span><br><span class="line">        items[putIndex] = x;</span><br><span class="line">       <span class="comment">//通过循环数组实现的队列，当数组满了时下标就变成0了</span></span><br><span class="line">        <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">            putIndex = <span class="number">0</span>;</span><br><span class="line">        count++;</span><br><span class="line">       <span class="comment">//激活因为notEmpty条件而阻塞的线程，比如调用take方法的线程</span></span><br><span class="line">        notEmpty.signal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据从队列中取出的方法</span></span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">        <span class="comment">// assert items[takeIndex] != null;</span></span><br><span class="line">        <span class="keyword">final</span> Object[] items = <span class="built_in">this</span>.items;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">E</span> <span class="variable">x</span> <span class="operator">=</span> (E) items[takeIndex];</span><br><span class="line">        <span class="comment">//将对应的数组下标位置设置为null释放资源</span></span><br><span class="line">        items[takeIndex] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (++takeIndex == items.length)</span><br><span class="line">            takeIndex = <span class="number">0</span>;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (itrs != <span class="literal">null</span>)</span><br><span class="line">            itrs.elementDequeued();</span><br><span class="line">       <span class="comment">//激活因为notFull条件而阻塞的线程，比如调用put方法的线程</span></span><br><span class="line">        notFull.signal();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put方法和offer方法不一样的地方在于，如果队列是满的话，它就会把调用put方法的线程阻塞，直到队列里有空间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">       <span class="comment">//因为后面调用了条件变量的await()方法，而await()方法会在中断标志设置后抛出InterruptedException异常后退出，</span></span><br><span class="line">      <span class="comment">// 所以在加锁时候先看中断标志是不是被设置了，如果设置了直接抛出InterruptedException异常，就不用再去获取锁了</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == items.length)</span><br><span class="line">                <span class="comment">//如果队列满的话就阻塞等待，直到notFull的signal方法被调用，也就是队列里有空间了</span></span><br><span class="line">                notFull.await();</span><br><span class="line">           <span class="comment">//队列里有空间了执行添加操作</span></span><br><span class="line">            enqueue(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//poll方法用于从队列中取数据，不会阻塞当前线程</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果队列为空的话会直接返回null，否则调用dequeue方法取数据</span></span><br><span class="line">            <span class="keyword">return</span> (count == <span class="number">0</span>) ? <span class="literal">null</span> : dequeue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有等待时间的 poll 重载方法</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                nanos = notEmpty.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dequeue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//take方法也是用于取队列中的数据，但是和poll方法不同的是它有可能会阻塞当前的线程</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//当队列为空时，就会阻塞当前线程</span></span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            <span class="comment">//直到队列中有数据了，调用dequeue方法将数据返回</span></span><br><span class="line">            <span class="keyword">return</span> dequeue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> itemAt(takeIndex); <span class="comment">// null when queue is empty</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列的元素个数，加了锁，所以结果是准确的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此外，还有一些其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队列剩余空间，还能加几个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remainingCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> items.length - count;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断队列中是否存在当前元素o</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回一个按正确顺序，包含队列中所有元素的数组</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动清空队列中的所有元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除队列中所有可用元素，并将他们加入到给定的 Collection 中    </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">drainTo</span><span class="params">(Collection&lt;? <span class="built_in">super</span> E&gt; c)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回此队列中按正确顺序进行迭代的，包含所有元素的迭代器</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>LinkedBlockingQueue 是一个用单向链表实现的有界阻塞队列。此队列的默认和最大长度为 <code>Integer.MAX_VALUE</code>。此队列按照先进先出的原则对元素进行排序。</p><p>如果不是特殊业务，LinkedBlockingQueue 使用时，切记要定义容量 <code>new LinkedBlockingQueue(capacity)</code></p><p>，防止过度膨胀。</p><p><strong>源码解读</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedBlockingQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6903933977591709194L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于链表实现，肯定要有结点类，典型的单链表结构</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node(E x) &#123; item = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前队列元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头节点，不存数据</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 尾节点，便于入队</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// take锁，出队锁，只有take，poll方法会持有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">takeLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队等待条件</span></span><br><span class="line"><span class="comment">// 当队列无元素时，take锁会阻塞在notEmpty条件上，等待其它线程唤醒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队锁，只有put，offer会持有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">putLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队等待条件</span></span><br><span class="line">  <span class="comment">// 当队列满了时，put锁会会阻塞在notFull上，等待其它线程唤醒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> putLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同样提供三个构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedBlockingQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">       <span class="comment">// 初始化head和last指针为空值节点</span></span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        last = head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedBlockingQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果没传容量，就使用最大int值初始化其容量</span></span><br><span class="line">        <span class="built_in">this</span>(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedBlockingQueue</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 不允许null元素</span></span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="comment">//规定给当前put方法预留一个本地变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 新建一个节点</span></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(e);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">putLock</span> <span class="operator">=</span> <span class="built_in">this</span>.putLock;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count;</span><br><span class="line">        <span class="comment">// 使用put锁加锁</span></span><br><span class="line">        putLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 如果队列满了，就阻塞在notFull条件上</span></span><br><span class="line">        <span class="comment">// 等待被其它线程唤醒</span></span><br><span class="line">            <span class="keyword">while</span> (count.get() == capacity) &#123;</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 队列不满了，就入队</span></span><br><span class="line">            enqueue(node);</span><br><span class="line">            <span class="comment">// 队列长度加1</span></span><br><span class="line">            c = count.getAndIncrement();</span><br><span class="line">            <span class="comment">// 如果现队列长度小于容量</span></span><br><span class="line">        <span class="comment">// 就再唤醒一个阻塞在notFull条件上的线程</span></span><br><span class="line">            <span class="comment">// 这里为啥要唤醒一下呢？</span></span><br><span class="line">            <span class="comment">// 因为可能有很多线程阻塞在notFull这个条件上的</span></span><br><span class="line">            <span class="comment">// 而取元素时只有取之前队列是满的才会唤醒notFull</span></span><br><span class="line">            <span class="comment">// 为什么队列满的才唤醒notFull呢？</span></span><br><span class="line">            <span class="comment">// 因为唤醒是需要加putLock的，这是为了减少锁的次数</span></span><br><span class="line">            <span class="comment">// 所以，这里索性在放完元素就检测一下，未满就唤醒其它notFull上的线程</span></span><br><span class="line">            <span class="comment">// 说白了，这也是锁分离带来的代价</span></span><br><span class="line">            <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">                notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果原队列长度为0，现在加了一个元素后立即唤醒notEmpty条件</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            signalNotEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">signalNotEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">takeLock</span> <span class="operator">=</span> <span class="built_in">this</span>.takeLock;</span><br><span class="line">        <span class="comment">// 加take锁</span></span><br><span class="line">        takeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 唤醒notEmpty条件</span></span><br><span class="line">            notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">signalNotFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">putLock</span> <span class="operator">=</span> <span class="built_in">this</span>.putLock;</span><br><span class="line">        putLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接加到last后面</span></span><br><span class="line">        last = last.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="comment">//用带过期时间的说明</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e, <span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="comment">//转换为纳秒</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">putLock</span> <span class="operator">=</span> <span class="built_in">this</span>.putLock;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count;</span><br><span class="line">        <span class="comment">//获取入队锁，支持等待锁的过程中被中断</span></span><br><span class="line">        putLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//队列满了，再看看有没有超时</span></span><br><span class="line">            <span class="keyword">while</span> (count.get() == capacity) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">//等待时间超时</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//进行等待，awaitNanos(long nanos)是AQS中的方法</span></span><br><span class="line">                <span class="comment">//在等待过程中，如果被唤醒或超时，则继续当前循环</span></span><br><span class="line">                <span class="comment">//如果被中断，则抛出中断异常</span></span><br><span class="line">                nanos = notFull.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进入队尾</span></span><br><span class="line">            enqueue(<span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(e));</span><br><span class="line">            c = count.getAndIncrement();</span><br><span class="line">            <span class="comment">//说明当前元素后面还能再插入一个</span></span><br><span class="line">            <span class="comment">//就唤醒一个入队条件队列中阻塞的线程</span></span><br><span class="line">            <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">                notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//节点数量为0，说明队列是空的</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//唤醒一个出队条件队列阻塞的线程</span></span><br><span class="line">            signalNotEmpty();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        E x;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">takeLock</span> <span class="operator">=</span> <span class="built_in">this</span>.takeLock;</span><br><span class="line">        takeLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果队列无元素，则阻塞在notEmpty条件上</span></span><br><span class="line">            <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则，出队</span></span><br><span class="line">            x = dequeue();</span><br><span class="line">            <span class="comment">// 获取出队前队列的长度</span></span><br><span class="line">            c = count.getAndDecrement();</span><br><span class="line">            <span class="comment">// 如果取之前队列长度大于1，则唤醒notEmpty</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">                notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果取之前队列长度等于容量</span></span><br><span class="line">     <span class="comment">// 则唤醒notFull</span></span><br><span class="line">        <span class="keyword">if</span> (c == capacity)</span><br><span class="line">            signalNotFull();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;E&gt; h = head;</span><br><span class="line">        Node&lt;E&gt; first = h.next;</span><br><span class="line">        h.next = h; <span class="comment">// help GC</span></span><br><span class="line">        head = first;</span><br><span class="line">        <span class="type">E</span> <span class="variable">x</span> <span class="operator">=</span> first.item;</span><br><span class="line">        first.item = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">takeLock</span> <span class="operator">=</span> <span class="built_in">this</span>.takeLock;</span><br><span class="line">        takeLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//队列为空且已经超时，直接返回空</span></span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">//等待过程中可能被唤醒，超时，中断</span></span><br><span class="line">                nanos = notEmpty.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行出队操作</span></span><br><span class="line">            x = dequeue();</span><br><span class="line">            c = count.getAndDecrement();</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">                notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果出队前，队列是满的，则唤醒一个被take()阻塞的线程</span></span><br><span class="line">        <span class="keyword">if</span> (c == capacity)</span><br><span class="line">            signalNotFull();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count.get() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">takeLock</span> <span class="operator">=</span> <span class="built_in">this</span>.takeLock;</span><br><span class="line">        takeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Node&lt;E&gt; first = head.next;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> first.item;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; p, Node&lt;E&gt; trail)</span> &#123;</span><br><span class="line">        <span class="comment">// assert isFullyLocked();</span></span><br><span class="line">        <span class="comment">// p.next is not changed, to allow iterators that are</span></span><br><span class="line">        <span class="comment">// traversing p to maintain their weak-consistency guarantee.</span></span><br><span class="line">        p.item = <span class="literal">null</span>;</span><br><span class="line">        trail.next = p.next;</span><br><span class="line">        <span class="keyword">if</span> (last == p)</span><br><span class="line">            last = trail;</span><br><span class="line">        <span class="keyword">if</span> (count.getAndDecrement() == capacity)</span><br><span class="line">            notFull.signal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        fullyLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; trail = head, p = trail.next;</span><br><span class="line">                 p != <span class="literal">null</span>;</span><br><span class="line">                 trail = p, p = p.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(p.item)) &#123;</span><br><span class="line">                    unlink(p, trail);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fullyUnlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LBQSpliterator</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Spliterator</span>&lt;E&gt; &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>LinkedBlockingQueue 与 ArrayBlockingQueue对比</strong></p><ul><li>ArrayBlockingQueue 入队出队采用一把锁，导致入队出队相互阻塞，效率低下；</li><li>LinkedBlockingQueue 入队出队采用两把锁，入队出队互不干扰，效率较高；</li><li>二者都是有界队列，如果长度相等且出队速度跟不上入队速度，都会导致大量线程阻塞；</li><li>LinkedBlockingQueue 如果初始化不传入初始容量，则使用最大 int 值，如果出队速度跟不上入队速度，会导致队列特别长，占用大量内存；</li></ul><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>PriorityBlockingQueue 是一个支持优先级的无界阻塞队列。(虽说是无界队列，但是由于资源耗尽的话，也会OutOfMemoryError，无法添加元素)</p><p>默认情况下元素采用自然顺序升序排列。也可以自定义类实现 <code>compareTo()</code> 方法来指定元素排序规则，或者初始化 PriorityBlockingQueue 时，指定构造参数 Comparator 来对元素进行排序。但需要注意的是不能保证同优先级元素的顺序。PriorityBlockingQueue 是基于<strong>最小二叉堆</strong>实现，使用基于 CAS 实现的自旋锁来控制队列的动态扩容，保证了扩容操作不会阻塞 take 操作的执行。</p><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p>DelayQueue 是一个使用优先级队列实现的延迟无界阻塞队列。</p><p>队列使用 PriorityQueue 来实现。队列中的元素必须实现 Delayed 接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。我们可以将 DelayQueue 运用在以下应用场景：</p><ul><li>缓存系统的设计：可以用 DelayQueue 保存缓存元素的有效期，使用一个线程循环查询 DelayQueue，一旦能从 DelayQueue 中获取元素时，表示缓存有效期到了。</li><li>定时任务调度。使用 DelayQueue 保存当天将会执行的任务和执行时间，一旦从 DelayQueue 中获取到任务就开始执行，从比如 Timer 就是使用 DelayQueue 实现的。</li></ul><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue 是一个不存储元素的阻塞队列，也即是单个元素的队列。</p><p>每一个 put 操作必须等待一个 take 操作，否则不能继续添加元素。SynchronousQueue 可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合于传递性场景, 比如在一个线程中使用的数据，传递给另外一个线程使用，SynchronousQueue 的吞吐量高于 LinkedBlockingQueue 和 ArrayBlockingQueue。</p><p> <strong>Coding</strong></p><p>synchronousQueue 是一个没有数据缓冲的阻塞队列，生产者线程对其的插入操作 put() 必须等待消费者的移除操作 take()，反过来也一样。</p><p>对应 peek, contains, clear, isEmpty … 等方法其实是无效的。</p><p>但是 poll() 和 offer() 就不会阻塞，举例来说就是 offer 的时候如果有消费者在等待那么就会立马满足返回 true，如果没有就会返回 false，不会等待消费者到来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//System.out.println(queue.offer(&quot;aaa&quot;));   //false</span></span><br><span class="line">        <span class="comment">//System.out.println(queue.poll());         //null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;bbb&quot;</span>));      <span class="comment">//IllegalStateException: Queue full</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 put a&quot;</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 put b&quot;</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 1 put c&quot;</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get:&quot;</span>+queue.take());</span><br><span class="line"></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get:&quot;</span>+queue.take());</span><br><span class="line"></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread 2 get:&quot;</span>+queue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread <span class="number">1</span> put a</span><br><span class="line">Thread <span class="number">2</span> get:a</span><br><span class="line">Thread <span class="number">1</span> put b</span><br><span class="line">Thread <span class="number">2</span> get:b</span><br><span class="line">Thread <span class="number">1</span> put c</span><br><span class="line">Thread <span class="number">2</span> get:c</span><br></pre></td></tr></table></figure><p><strong>源码解读</strong></p><p>不像ArrayBlockingQueue、LinkedBlockingDeque之类的阻塞队列依赖AQS实现并发操作，SynchronousQueue直接使用CAS实现线程的安全访问。</p><p>synchronousQueue 提供了两个构造器（公平与否），内部是通过 Transferer 来实现的，具体分为两个Transferer，分别是 TransferStack 和 TransferQueue。</p><p>TransferStack：非公平竞争模式使用的数据结构是后进先出栈(LIFO Stack)</p><p>TransferQueue：公平竞争模式则使用先进先出队列（FIFO Queue）</p><p>性能上两者是相当的，一般情况下，FIFO 通常可以支持更大的吞吐量，但 LIFO 可以更大程度的保持线程的本地化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Transferer&lt;E&gt; transferer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SynchronousQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SynchronousQueue</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    transferer = fair ? <span class="keyword">new</span> <span class="title class_">TransferQueue</span>&lt;E&gt;() : <span class="keyword">new</span> <span class="title class_">TransferStack</span>&lt;E&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析 TransferQueue 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数中会初始化一个出队的节点，并且首尾都指向这个节点</span></span><br><span class="line">TransferQueue() &#123;</span><br><span class="line">    <span class="type">QNode</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QNode</span>(<span class="literal">null</span>, <span class="literal">false</span>); <span class="comment">// initialize to dummy node.</span></span><br><span class="line">    head = h;</span><br><span class="line">    tail = h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队列节点,</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">QNode</span> &#123;</span><br><span class="line">  <span class="keyword">volatile</span> QNode next;          <span class="comment">// next node in queue</span></span><br><span class="line">  <span class="keyword">volatile</span> Object item;         <span class="comment">// CAS&#x27;ed to or from null</span></span><br><span class="line">  <span class="keyword">volatile</span> Thread waiter;       <span class="comment">// to control park/unpark</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">boolean</span> isData;</span><br><span class="line"></span><br><span class="line">  QNode(Object item, <span class="type">boolean</span> isData) &#123;</span><br><span class="line">    <span class="built_in">this</span>.item = item;</span><br><span class="line">    <span class="built_in">this</span>.isData = isData;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 设置next和item的值，用于进行并发更新, cas 无锁操作</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">casNext</span><span class="params">(QNode cmp, QNode val)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">next</span> <span class="operator">=</span>= cmp &amp;&amp;</span><br><span class="line">      UNSAFE.compareAndSwapObject(<span class="built_in">this</span>, nextOffset, cmp, val);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">casItem</span><span class="params">(Object cmp, Object val)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">item</span> <span class="operator">=</span>= cmp &amp;&amp;</span><br><span class="line">      UNSAFE.compareAndSwapObject(<span class="built_in">this</span>, itemOffset, cmp, val);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">tryCancel</span><span class="params">(Object cmp)</span> &#123;</span><br><span class="line">    UNSAFE.compareAndSwapObject(<span class="built_in">this</span>, itemOffset, cmp, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">item</span> <span class="operator">=</span>= <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isOffList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">next</span> <span class="operator">=</span>= <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Unsafe mechanics</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> itemOffset;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> nextOffset;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">      Class&lt;?&gt; k = QNode.class;</span><br><span class="line">      itemOffset = UNSAFE.objectFieldOffset</span><br><span class="line">        (k.getDeclaredField(<span class="string">&quot;item&quot;</span>));</span><br><span class="line">      nextOffset = UNSAFE.objectFieldOffset</span><br><span class="line">        (k.getDeclaredField(<span class="string">&quot;next&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 <code>put()</code> 方法和 <code>take()</code> 方法可以看出最终调用的都是 TransferQueue 的 <code>transfer()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="keyword">if</span> (transferer.transfer(e, <span class="literal">false</span>, <span class="number">0</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">        Thread.interrupted();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> transferer.transfer(<span class="literal">null</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (e != <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">  Thread.interrupted();</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//transfer方法用于提交数据或者是获取数据</span></span><br><span class="line">E <span class="title function_">transfer</span><span class="params">(E e, <span class="type">boolean</span> timed, <span class="type">long</span> nanos)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">QNode</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// constructed/reused as needed</span></span><br><span class="line">  <span class="comment">//如果e不为null，就说明是添加数据的入队操作</span></span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isData</span> <span class="operator">=</span> (e != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="type">QNode</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">    <span class="type">QNode</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span> || h == <span class="literal">null</span>)         <span class="comment">// saw uninitialized value</span></span><br><span class="line">      <span class="keyword">continue</span>;                       <span class="comment">// spin</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前操作和 tail 节点的操作是一样的；或者头尾相同（表明队列中啥都没有）。</span></span><br><span class="line">    <span class="keyword">if</span> (h == t || t.isData == isData) &#123; <span class="comment">// empty or same-mode</span></span><br><span class="line">      <span class="type">QNode</span> <span class="variable">tn</span> <span class="operator">=</span> t.next;</span><br><span class="line">      <span class="comment">// 如果 t 和 tail 不一样，说明，tail 被其他的线程改了，重来</span></span><br><span class="line">      <span class="keyword">if</span> (t != tail)                  <span class="comment">// inconsistent read</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// 如果 tail 的 next 不是空。就需要将 next 追加到 tail 后面了</span></span><br><span class="line">      <span class="keyword">if</span> (tn != <span class="literal">null</span>) &#123;               <span class="comment">// lagging tail</span></span><br><span class="line">        <span class="comment">// 使用 CAS 将 tail.next 变成 tail,</span></span><br><span class="line">        advanceTail(t, tn);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 时间到了，不等待，返回 null，插入失败，获取也是失败的</span></span><br><span class="line">      <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0</span>)        <span class="comment">// can&#x27;t wait</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (s == <span class="literal">null</span>)</span><br><span class="line">        s = <span class="keyword">new</span> <span class="title class_">QNode</span>(e, isData);</span><br><span class="line">      <span class="keyword">if</span> (!t.casNext(<span class="literal">null</span>, s))        <span class="comment">// failed to link in</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      advanceTail(t, s);              <span class="comment">// swing tail and wait</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> awaitFulfill(s, e, timed, nanos);</span><br><span class="line">      <span class="keyword">if</span> (x == s) &#123;                   <span class="comment">// wait was cancelled</span></span><br><span class="line">        clean(t, s);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!s.isOffList()) &#123;           <span class="comment">// not already unlinked</span></span><br><span class="line">        advanceHead(t, s);          <span class="comment">// unlink if head</span></span><br><span class="line">        <span class="keyword">if</span> (x != <span class="literal">null</span>)              <span class="comment">// and forget fields</span></span><br><span class="line">          s.item = s;</span><br><span class="line">        s.waiter = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (x != <span class="literal">null</span>) ? (E)x : e;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                            <span class="comment">// complementary-mode</span></span><br><span class="line">      <span class="type">QNode</span> <span class="variable">m</span> <span class="operator">=</span> h.next;               <span class="comment">// node to fulfill</span></span><br><span class="line">      <span class="keyword">if</span> (t != tail || m == <span class="literal">null</span> || h != head)</span><br><span class="line">        <span class="keyword">continue</span>;                   <span class="comment">// inconsistent read</span></span><br><span class="line"></span><br><span class="line">      <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> m.item;</span><br><span class="line">      <span class="keyword">if</span> (isData == (x != <span class="literal">null</span>) ||    <span class="comment">// m already fulfilled</span></span><br><span class="line">          x == m ||                   <span class="comment">// m cancelled</span></span><br><span class="line">          !m.casItem(x, e)) &#123;         <span class="comment">// lost CAS</span></span><br><span class="line">        advanceHead(h, m);          <span class="comment">// dequeue and retry</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      advanceHead(h, m);              <span class="comment">// successfully fulfilled</span></span><br><span class="line">      LockSupport.unpark(m.waiter);</span><br><span class="line">      <span class="keyword">return</span> (x != <span class="literal">null</span>) ? (E)x : e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedTransferQueue"><a href="#LinkedTransferQueue" class="headerlink" title="LinkedTransferQueue"></a>LinkedTransferQueue</h2><p>LinkedTransferQueue 是一个由链表结构组成的无界阻塞 TransferQueue 队列。</p><p>LinkedTransferQueue采用一种预占模式。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为null的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的方法返回。我们称这种节点操作为“匹配”方式。</p><p>队列实现了 TransferQueue 接口重写了 tryTransfer 和 transfer 方法，这组方法和 SynchronousQueue 公平模式的队列类似，具有匹配的功能</p><h2 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h2><p>LinkedBlockingDeque 是一个由链表结构组成的双向阻塞队列。</p><p>所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque 多了 addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast 等方法，以 First 单词结尾的方法，表示插入，获取（peek）或移除双端队列的第一个元素。以 Last 单词结尾的方法，表示插入，获取或移除双端队列的最后一个元素。另外插入方法 add 等同于 addLast，移除方法 remove 等效于 removeFirst。</p><p>在初始化 LinkedBlockingDeque 时可以设置容量防止其过渡膨胀，默认容量也是 Integer.MAX_VALUE。另外双向阻塞队列可以运用在“工作窃取”模式中。</p><h1 id="阻塞队列使用场景"><a href="#阻塞队列使用场景" class="headerlink" title="阻塞队列使用场景"></a>阻塞队列使用场景</h1><p>我们常用的生产者消费者模式就可以基于阻塞队列实现；</p><p>线程池中活跃线程数达到 corePoolSize 时，线程池将会将后续的 task 提交到 BlockingQueue 中；</p><h2 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式</h2><p>JDK API文档的 BlockingQueue 给出了一个典型的应用</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/je73vyt2gq.jpeg"></p><blockquote><p>面试题：一个初始值为 0 的变量，两个线程对齐交替操作，一个+1，一个-1，5 轮</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProdCounsume_TraditionDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ShareData</span> <span class="variable">shareData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShareData</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                shareData.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                shareData.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程操作资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShareData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//等待，不能生产</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">//干活</span></span><br><span class="line">                num++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + num);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//唤醒</span></span><br><span class="line">                condition.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//等待，不能生产</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">//干活</span></span><br><span class="line">                num--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + num);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//唤醒</span></span><br><span class="line">                condition.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池的核心方法 ThreadPoolExecutor，用 BlockingQueue 存放任务的阻塞队列，被提交但尚未被执行的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure><p>线程池在内部实际也是构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/68wfrtnmnf.jpeg"></p><p>不同的线程池实现用的是不同的阻塞队列，newFixedThreadPool 和 newSingleThreadExecutor 用的是LinkedBlockingQueue，newCachedThreadPool 用的是 SynchronousQueue。</p><p>参考：</p><p><a href="https://cloud.tencent.com/developer/article/1706970">Java 7 种阻塞队列详解 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;队列和阻塞队列&quot;&gt;&lt;a href=&quot;#队列和阻塞队列&quot; class=&quot;headerlink&quot; title=&quot;队列和阻塞队列&quot;&gt;&lt;/a&gt;队列和阻塞队列&lt;/h1&gt;&lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;p&gt;队列（&lt;code&gt;Queue&lt;/code&gt;）是一种经常使用的集合。&lt;code&gt;Queue&lt;/code&gt; 实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。和 List、Set 一样都继承自 Collection。它和 &lt;code&gt;List&lt;/code&gt; 的区别在于，&lt;code&gt;List&lt;/code&gt;可以在任意位置添加和删除元素，而&lt;code&gt;Queue&lt;/code&gt; 只有两个操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把元素添加到队列末尾；&lt;/li&gt;
&lt;li&gt;从队列头部取出元素。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="队列" scheme="https://xssdpgy.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>TimeLimiter接口超时中断实现分析</title>
    <link href="https://xssdpgy.github.io/2023/01/31/TimeLimiter%E6%8E%A5%E5%8F%A3%E8%B6%85%E6%97%B6%E4%B8%AD%E6%96%AD%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://xssdpgy.github.io/2023/01/31/TimeLimiter%E6%8E%A5%E5%8F%A3%E8%B6%85%E6%97%B6%E4%B8%AD%E6%96%AD%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</id>
    <published>2023-01-31T10:04:32.000Z</published>
    <updated>2023-02-07T16:26:00.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-背景"><a href="#0-背景" class="headerlink" title="0.背景"></a>0.背景</h1><span id="more"></span><p>前段时间，其他组同事找到我，说让我协助看一个事务未回滚问题，刚开始以为是事务隔离设置方面的原因，结果原因很简单，因为要给接口添加超时中断的功能，他根据网上文章使用<code>java.util.concurrent.Future#get(long, java.util.concurrent.TimeUnit)</code>来实现超时中断功能，结果超时功能实现了，但是超时抛出异常后接口事务没有回滚，我看了下代码，主要原因是方法中使用的是声明式事务，对于新引入的异步任务来说事务管理粒度太粗糙，且捕获超时异常后，任务未手动取消。下意识准备调整为编程式事务来使事务管理细化，结果刚要下手时想到不是有现成的轮子嘛，下面就该轮子——guava的<code>TimeLimiter</code>进行简要介绍。</p><h1 id="1-使用场景描述"><a href="#1-使用场景描述" class="headerlink" title="1.使用场景描述"></a>1.使用场景描述</h1><p>网上找了段话描述接口超时中断的需求场景：</p><ul><li>如果调用方法超过1秒，就应该停止调用，不要一直阻塞下去，防止把本身的服务资源搞挂。</li><li>在不可预知可能出现死锁&#x2F;死循环的代码，要加上时间的阀值，避免阻塞。</li></ul><h1 id="2-TimeLimiter实现接口超时中断"><a href="#2-TimeLimiter实现接口超时中断" class="headerlink" title="2.TimeLimiter实现接口超时中断"></a>2.TimeLimiter实现接口超时中断</h1><p>guava工具包里面包含了超时的控制方法。即<code>TimeLimiter</code> 接口，其有两个实现类。</p><ul><li><code>FakeTimeLimiter</code>, 常用于debug调试时，限制时间超时调试。</li><li><code>SimpleTimeLimiter</code> 常用于正式方法中，调用方法超时，即抛出异常。</li></ul><p>我们在实际开发中也是使用<code>SimpleTimeLimiter</code>来实现超时控制功能，其有两种实现模式：代理模式，回调模式。实现很简单，看代码即可了解。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230131162741208.png"></p><h1 id="3-SimpleTimeLimiter-的源码实现"><a href="#3-SimpleTimeLimiter-的源码实现" class="headerlink" title="3.SimpleTimeLimiter 的源码实现"></a>3.SimpleTimeLimiter 的源码实现</h1><h2 id="3-1-代理模式"><a href="#3-1-代理模式" class="headerlink" title="3.1 代理模式"></a>3.1 代理模式</h2><blockquote><p>com.google.common.util.concurrent.SimpleTimeLimiter#newProxy</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> public &lt;T&gt; T newProxy(final T target, Class&lt;T&gt; interfaceType,</span><br><span class="line">     final long timeoutDuration, final TimeUnit timeoutUnit) &#123;</span><br><span class="line">   checkNotNull(target);</span><br><span class="line">   checkNotNull(interfaceType);</span><br><span class="line">   checkNotNull(timeoutUnit);</span><br><span class="line">   checkArgument(timeoutDuration &gt; 0, &quot;bad timeout: %s&quot;, timeoutDuration);</span><br><span class="line">   checkArgument(interfaceType.isInterface(),</span><br><span class="line">       &quot;interfaceType must be an interface type&quot;);</span><br><span class="line"></span><br><span class="line">   final Set&lt;Method&gt; interruptibleMethods</span><br><span class="line">       = findInterruptibleMethods(interfaceType);</span><br><span class="line"></span><br><span class="line">   InvocationHandler handler = new InvocationHandler() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public Object invoke(Object obj, final Method method, final Object[] args)</span><br><span class="line">         throws Throwable &#123;</span><br><span class="line">       Callable&lt;Object&gt; callable = new Callable&lt;Object&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public Object call() throws Exception &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">             return method.invoke(target, args);</span><br><span class="line">           &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">             throwCause(e, false);</span><br><span class="line">             throw new AssertionError(&quot;can&#x27;t get here&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       return callWithTimeout(callable, timeoutDuration, timeoutUnit,</span><br><span class="line">           interruptibleMethods.contains(method));</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   return newProxy(interfaceType, handler);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-回调模式"><a href="#3-2-回调模式" class="headerlink" title="3.2 回调模式"></a>3.2 回调模式</h2><blockquote><p>com.google.common.util.concurrent.SimpleTimeLimiter#callWithTimeout</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">callWithTimeout</span><span class="params">(Callable&lt;T&gt; callable, <span class="type">long</span> timeoutDuration,</span></span><br><span class="line"><span class="params">     TimeUnit timeoutUnit, <span class="type">boolean</span> amInterruptible)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   checkNotNull(callable);</span><br><span class="line">   checkNotNull(timeoutUnit);</span><br><span class="line">   checkArgument(timeoutDuration &gt; <span class="number">0</span>, <span class="string">&quot;timeout must be positive: %s&quot;</span>,</span><br><span class="line">       timeoutDuration);</span><br><span class="line">   Future&lt;T&gt; future = executor.submit(callable);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (amInterruptible) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//实际也是通过Future#get(long, java.util.concurrent.TimeUnit)实现超时</span></span><br><span class="line">         <span class="keyword">return</span> future.get(timeoutDuration, timeoutUnit);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         future.cancel(<span class="literal">true</span>);</span><br><span class="line">         <span class="keyword">throw</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> Uninterruptibles.getUninterruptibly(future, </span><br><span class="line">           timeoutDuration, timeoutUnit);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> throwCause(e, <span class="literal">true</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">     <span class="comment">//超时异常取消任务并抛出UncheckedTimeoutException异常</span></span><br><span class="line">     future.cancel(<span class="literal">true</span>);</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UncheckedTimeoutException</span>(e);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>代理模式主要针对类，回调模式可以针对某部分代码，可以看到代理模式也是基于回调模式方法做了层代码封装，超时控制的底层实现还是在<code>SimpleTimeLimiter#callWithTimeout</code>，其基于<code>Future#get(long, java.util.concurrent.TimeUnit)</code>实现超时，因此<code>SimpleTimeLimiter</code>本质上也是使用了<code>JDK</code>中的<code>Future</code>对象实现了超时中断控制。</p><p>结合代理模式调用超时链路即很清晰的展示超时中断控制实现，此时接口仍旧使用声明式事务，超时后事务正常回滚。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230131175009885.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0.背景&quot;&gt;&lt;/a&gt;0.背景&lt;/h1&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="timeLimit" scheme="https://xssdpgy.github.io/tags/timeLimit/"/>
    
    <category term="源码分析" scheme="https://xssdpgy.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Seata客户端集成及AT&amp;TCC事务模式演示</title>
    <link href="https://xssdpgy.github.io/2023/01/30/Seata%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%9B%86%E6%88%90%E5%8F%8AAT&amp;TCC%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%BC%8F%E6%BC%94%E7%A4%BA/"/>
    <id>https://xssdpgy.github.io/2023/01/30/Seata%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%9B%86%E6%88%90%E5%8F%8AAT&amp;TCC%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%BC%8F%E6%BC%94%E7%A4%BA/</id>
    <published>2023-01-30T02:54:43.000Z</published>
    <updated>2023-02-07T16:26:00.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>简要说下背景，当前使用seata是基于官方1.5.2版本开发的，所以集成过程可供1.5.2及之后版本的使用者参考，为区别于官方版本，内部版本号设置为1.5.2.2。设计demo演示全局事务，执行流程如下。</p><p><strong>demo业务流程设计</strong></p><span id="more"></span><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130143946011.png"></p><h1 id="1-Seata客户端集成"><a href="#1-Seata客户端集成" class="headerlink" title="1.Seata客户端集成"></a>1.Seata客户端集成</h1><h2 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot项目，引入seata-spring-boot-starter依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 为保证微服务间xid透传，引入此依赖（注意，需排除引入其他版本seata依赖的影响） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目seata相关依赖版本统一如下：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130112554825.png"></p><h2 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h2><p>以fundpay服务为例，配置文件中新增配置，主要为seata客户端服务配置注册中心及<code>vgroupMapping</code>设置。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130140625932.png"></p><p>之后可启动seata-server服务端，再启动fundpay客户端服务查看是否正常启动及注册。如下日志即为客户端服务启动成功并成功注册到seata-server服务端时，seata-server服务端的输出（打印前两行日志即可视为成功）。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130142552233.png"></p><p>其他微服务按此方式集成注册。</p><p><strong>集成成功后，服务间拓扑如下</strong></p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/1001990-20221217231736846-2029982669.png"></p><h1 id="2-AT事务模式开发配置"><a href="#2-AT事务模式开发配置" class="headerlink" title="2.AT事务模式开发配置"></a>2.AT事务模式开发配置</h1><p>AT事务模式代码侵入性低，可以基本保持之前的代码结构，一般情况下，只需要在入口业务方法实现上添加<code>@GlobalTransactional</code>注解即可。</p><p>原先接口主要代码实现如下：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130165219550.png"></p><p>在<code>com.boss.fundpay.service.impl.PayServiceImpl#pay</code>业务实现方法上添加全局事务注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@GlobalTransactional(rollbackFor = Exception.class,timeoutMills = 60000)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResultDTO <span class="title function_">pay</span><span class="params">(PayInfoDto payInfo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.记录当前操作</span></span><br><span class="line">        <span class="type">PayLog</span> <span class="variable">payLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayLog</span>();</span><br><span class="line">        BeanUtil.copyProperties(payInfo,payLog);</span><br><span class="line"></span><br><span class="line">        payLog.setBgtId(IdUtil.simpleUUID());</span><br><span class="line">        <span class="type">String</span> <span class="variable">curDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        payLog.setPayTime(curDate);</span><br><span class="line">        payLogDao.insertPayLog(payLog);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> payInfo.getOrderNo();</span><br><span class="line">        <span class="type">String</span> <span class="variable">merchantId</span> <span class="operator">=</span> payInfo.getMerchantId();</span><br><span class="line">        <span class="comment">//2.调用流程审核</span></span><br><span class="line">        <span class="type">RiskAuditReq</span> <span class="variable">riskAuditReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RiskAuditReq</span>();</span><br><span class="line">        riskAuditReq.setMerchantId(merchantId);</span><br><span class="line">        riskAuditReq.setOrderNo(orderNo);</span><br><span class="line">        <span class="type">ApiResultDTO</span> <span class="variable">workflowResult</span> <span class="operator">=</span> workflowFeignApi.riskAudit(riskAuditReq);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(workflowResult)||ApiResultDTO.hasError(workflowResult)</span><br><span class="line">                ||(!PASS.equals(workflowResult.getResult())))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取商户余额</span></span><br><span class="line">        <span class="type">MerchantBanlanceRecord</span> <span class="variable">record</span> <span class="operator">=</span> merchantBalanceRecordDao.selectBalanceRecordById(merchantId);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">balance</span> <span class="operator">=</span> record.getTotalBalance().add(payInfo.getTotalAmount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用记账</span></span><br><span class="line">        <span class="type">IncreaseBillReq</span> <span class="variable">increaseBillReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IncreaseBillReq</span>();</span><br><span class="line">        increaseBillReq.setOrderNo(orderNo);</span><br><span class="line">        increaseBillReq.setAccountAmount(balance);</span><br><span class="line">        increaseBillReq.setMerchantId(merchantId);</span><br><span class="line">        <span class="type">ApiResultDTO</span> <span class="variable">accountResult</span> <span class="operator">=</span> accountFeignApi.increaseBill(increaseBillReq);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(accountResult)||ApiResultDTO.hasError(accountResult))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.回写本地表</span></span><br><span class="line">        record.setPayType(payLog.getPayType());</span><br><span class="line">        record.setPayTime(payLog.getPayTime());</span><br><span class="line">        record.setOrderNo(payLog.getOrderNo());</span><br><span class="line">        record.setTotalAmount(payLog.getTotalAmount());</span><br><span class="line">        record.setTotalBalance(balance);</span><br><span class="line">        merchantBalanceRecordDao.updateBalanceRecord(record);</span><br><span class="line"><span class="comment">//创造异常触发回滚</span></span><br><span class="line"><span class="comment">//        int a = RandomUtil.randomInt(10);</span></span><br><span class="line"><span class="comment">//        if(a==5)&#123;</span></span><br><span class="line"><span class="comment">//            int b=1/0;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//完成</span></span><br><span class="line">        <span class="keyword">return</span> ApiResultDTO.success(<span class="string">&quot;成功了 order=&quot;</span>+orderNo+<span class="string">&quot; ,merchantId=&quot;</span>+merchantId+<span class="string">&quot; ,balance=&quot;</span>+balance);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在AT模式下，workflow服务和account服务的代码逻辑不需要调整。</p><h1 id="3-TCC事务模式开发配置"><a href="#3-TCC事务模式开发配置" class="headerlink" title="3.TCC事务模式开发配置"></a>3.TCC事务模式开发配置</h1><h2 id="3-1-两阶段提交回顾"><a href="#3-1-两阶段提交回顾" class="headerlink" title="3.1 两阶段提交回顾"></a>3.1 两阶段提交回顾</h2><p>回顾下官网描述，一个分布式的全局事务，整体是 <strong>两阶段提交</strong> 的模型。全局事务是由若干分支事务组成的，分支事务要满足 <strong>两阶段提交</strong> 的模型要求，即需要每个分支事务都具备自己的：</p><ul><li>一阶段 prepare 行为</li><li>二阶段 commit 或 rollback 行为</li></ul><p>根据两阶段行为模式的不同，将分支事务划分为 <strong>Automatic (Branch) Transaction Mode</strong> 和 <strong>TCC (Branch) Transaction Mode</strong>。</p><p>AT 模式基于 <strong>支持本地 ACID 事务</strong> 的 <strong>关系型数据库</strong>：</p><ul><li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。</li><li>二阶段 commit 行为：马上成功结束，<strong>自动</strong> 异步批量清理回滚日志。</li><li>二阶段 rollback 行为：通过回滚日志，<strong>自动</strong> 生成补偿操作，完成数据回滚。</li></ul><p>相应的，TCC 模式，不依赖于底层数据资源的事务支持：</p><ul><li>一阶段 prepare 行为：调用 <strong>自定义</strong> 的 prepare 逻辑。</li><li>二阶段 commit 行为：调用 <strong>自定义</strong> 的 commit 逻辑。</li><li>二阶段 rollback 行为：调用 <strong>自定义</strong> 的 rollback 逻辑。</li></ul><p>总之，TCC事务模式需要对代码逻辑进行重新设计，主要是需要按照 <strong>两阶段提交</strong> 的模型要求，开发自定义的分支事务，将其纳入全局事务的管理中。</p><h2 id="3-2-接口实现方法拆分"><a href="#3-2-接口实现方法拆分" class="headerlink" title="3.2 接口实现方法拆分"></a>3.2 接口实现方法拆分</h2><p>如下面示例，<code>pay</code>方法需要在接口层拆分出<code>prepare</code>、<code>confirm</code>、<code>rollback</code>三个子方法，将对应的代码逻辑拆分到对应子方法实现中，其他服务也按此模型思想进行代码拆分。</p><blockquote><p>fundpay实现拆分示例（仅拆分fundpay自身的业务DB操作，涉及远程调用的不需考虑，详情见下节）</p></blockquote><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130171659234.png"></p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130171801594.png"></p><blockquote><p>workflow实现拆分示例</p></blockquote><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130171940504.png"></p><p>业务实现的粒度拆分需要开发人员合理把控</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130172256066.png"></p><p>account服务拆分基本相同，这里省略。</p><h2 id="3-3-入口业务方法独立"><a href="#3-3-入口业务方法独立" class="headerlink" title="3.3 入口业务方法独立"></a>3.3 入口业务方法独立</h2><p>上节是将各个微服务的业务实现代码按照 <strong>二阶段提交</strong> 的思想进行了拆分，回到业务入口方法这里，不可能也不应该在fundpay服务拆分后的二阶段方法中执行远程调用，所以独立出单独的入口方法<code>Action</code>，执行整体的业务逻辑（含服务间远程调用），将各分支事务纳入全局事务的控制中。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230130174454286.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h1&gt;&lt;p&gt;简要说下背景，当前使用seata是基于官方1.5.2版本开发的，所以集成过程可供1.5.2及之后版本的使用者参考，为区别于官方版本，内部版本号设置为1.5.2.2。设计demo演示全局事务，执行流程如下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;demo业务流程设计&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="seata" scheme="https://xssdpgy.github.io/tags/seata/"/>
    
    <category term="分布式事务" scheme="https://xssdpgy.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Seata源码结构及事务模式介绍</title>
    <link href="https://xssdpgy.github.io/2023/01/30/Seata%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E5%8F%8A%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xssdpgy.github.io/2023/01/30/Seata%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E5%8F%8A%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-01-30T02:06:29.000Z</published>
    <updated>2023-02-07T16:26:00.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Seata是什么"><a href="#1-Seata是什么" class="headerlink" title="1.Seata是什么"></a>1.Seata是什么</h1><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h1 id="2-Seata体系中的三个组件"><a href="#2-Seata体系中的三个组件" class="headerlink" title="2.Seata体系中的三个组件"></a>2.Seata体系中的三个组件</h1><span id="more"></span><h2 id="2-1-三个组件"><a href="#2-1-三个组件" class="headerlink" title="2.1 三个组件"></a>2.1 三个组件</h2><p>Seata 内部定义了 3个模块来处理全局事务和分支事务的关系和处理过程，这三个组件分别是：</p><p><strong>TC (Transaction Coordinator) - 事务协调者</strong>：维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p><strong>TM (Transaction Manager) - 事务管理器</strong>：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><p><strong>RM (Resource Manager) - 资源管理器</strong>：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/1460000038240947.png"></p><h2 id="2-2-执行步骤"><a href="#2-2-执行步骤" class="headerlink" title="2.2 执行步骤"></a>2.2 执行步骤</h2><p>整个全局事务的执行步骤如下：</p><ol><li>TM 向 TC 申请开启一个全局事务，TC 创建全局事务后返回全局唯一的 XID，XID 会在全局事务的上下文中传播；</li><li>RM 向 TC 注册分支事务，该分支事务归属于拥有相同 XID 的全局事务；</li><li>TM 向 TC 发起全局提交或回滚；</li><li>TC 调度 XID 下的分支事务完成提交或者回滚。</li></ol><h1 id="3-Seata源码体系"><a href="#3-Seata源码体系" class="headerlink" title="3.Seata源码体系"></a>3.Seata源码体系</h1><p><strong>整体结构</strong></p><blockquote><p>源码基本同官方1.5.2-1.6.1版本。</p></blockquote><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230129155651276.png"></p><h1 id="4-Seata事务模式介绍"><a href="#4-Seata事务模式介绍" class="headerlink" title="4.Seata事务模式介绍"></a>4.Seata事务模式介绍</h1><h2 id="4-1-Seata-AT-模式"><a href="#4-1-Seata-AT-模式" class="headerlink" title="4.1 Seata AT 模式"></a>4.1 Seata AT 模式</h2><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20230129171805523.png"></p><p>两阶段提交协议的演变：</p><p><strong>一阶段</strong>：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</p><p><strong>二阶段</strong>：</p><p>提交异步化，非常快速地完成。</p><p>回滚通过一阶段的回滚日志进行反向补偿。</p><h2 id="4-2-Seata-TCC-模式"><a href="#4-2-Seata-TCC-模式" class="headerlink" title="4.2 Seata TCC 模式"></a>4.2 Seata TCC 模式</h2><p>整体是两阶段提交的模型。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/seata_tcc-1.png"></p><p>全局事务是由若干分支事务组成的，分支事务要满足两阶段提交的模型要求，即需要每个分支事务都具备自己的：</p><p><strong>一阶段</strong> prepare 行为</p><p><strong>二阶段</strong> commit 或 rollback 行为</p><h2 id="4-3-Seata-Saga-模式"><a href="#4-3-Seata-Saga-模式" class="headerlink" title="4.3 Seata Saga 模式"></a>4.3 Seata Saga 模式</h2><p>目前Seata提供的Saga模式是基于状态机引擎来实现的，机制是：</p><ul><li>通过状态图来定义服务调用的流程并生成 json 状态语言定义文件。</li><li>状态图中一个节点可以是调用一个服务，节点可以配置它的补偿节点。</li><li>状态图 json 由状态机引擎驱动执行，当出现异常时状态引擎反向执行已成功节点对应的补偿节点将事务回滚。</li><li>可以实现服务编排需求，支持单项选择、并发、子流程、参数转换、参数映射、服务执行状态判断、异常捕获等功能。</li></ul><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/1460000038240949.png"></p><h2 id="4-4-Seata-XA-模式"><a href="#4-4-Seata-XA-模式" class="headerlink" title="4.4 Seata XA 模式"></a>4.4 Seata XA 模式</h2><p>利用事务资源（数据库、消息服务等）对 XA 协议的支持，以 XA 协议的机制来管理分支事务的一种 事务模式。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/TB1hSpccIVl614jSZKPXXaGjpXa-1330-924.png"></p><p><strong>执行阶段</strong>：</p><ul><li>可回滚：业务 SQL 操作放在 XA 分支中进行，由资源对 XA 协议的支持来保证 可回滚。</li><li>持久化：XA 分支完成后，执行 XA prepare，同样，由资源对 XA 协议的支持来保证持久化（即，之后任何意外都不会造成无法回滚的情况）。</li></ul><p><strong>完成阶段</strong>：</p><ul><li>分支提交：执行 XA 分支的 commit</li><li>分支回滚：执行 XA 分支的 rollback</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-Seata是什么&quot;&gt;&lt;a href=&quot;#1-Seata是什么&quot; class=&quot;headerlink&quot; title=&quot;1.Seata是什么&quot;&gt;&lt;/a&gt;1.Seata是什么&lt;/h1&gt;&lt;p&gt;Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。&lt;/p&gt;
&lt;h1 id=&quot;2-Seata体系中的三个组件&quot;&gt;&lt;a href=&quot;#2-Seata体系中的三个组件&quot; class=&quot;headerlink&quot; title=&quot;2.Seata体系中的三个组件&quot;&gt;&lt;/a&gt;2.Seata体系中的三个组件&lt;/h1&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="seata" scheme="https://xssdpgy.github.io/tags/seata/"/>
    
    <category term="分布式事务" scheme="https://xssdpgy.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Seata AT模式源码解析</title>
    <link href="https://xssdpgy.github.io/2022/11/27/Seata-AT%E6%A8%A1%E5%BC%8F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://xssdpgy.github.io/2022/11/27/Seata-AT%E6%A8%A1%E5%BC%8F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-11-27T10:00:36.000Z</published>
    <updated>2023-02-07T16:26:00.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-AT模式的特性"><a href="#1-AT模式的特性" class="headerlink" title="1.AT模式的特性"></a>1.AT模式的特性</h1><h2 id="1-1-前提"><a href="#1-1-前提" class="headerlink" title="1.1 前提"></a>1.1 前提</h2><p>AT模式生效需要两个前提：</p><ul><li>基于支持本地ACID事务的关系型数据库</li><li>Java应用，通过JDBC访问数据库</li></ul><h2 id="1-2-整体机制"><a href="#1-2-整体机制" class="headerlink" title="1.2 整体机制"></a>1.2 整体机制</h2><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><h2 id="1-3-写隔离"><a href="#1-3-写隔离" class="headerlink" title="1.3 写隔离"></a>1.3 写隔离</h2><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><h2 id="1-4-读隔离"><a href="#1-4-读隔离" class="headerlink" title="1.4 读隔离"></a>1.4 读隔离</h2><p>在数据库本地事务隔离级别 <strong>读已提交（Read Committed）</strong> 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 <strong>读未提交（Read Uncommitted）</strong> 。</p><p>如果应用在特定场景下，必需要求全局的 <strong>读已提交</strong> ，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。</p><h1 id="2-源码梳理"><a href="#2-源码梳理" class="headerlink" title="2. 源码梳理"></a>2. 源码梳理</h1><blockquote><p>源码版本 1.5.2</p></blockquote><h2 id="2-1-TM及RM初始化"><a href="#2-1-TM及RM初始化" class="headerlink" title="2.1 TM及RM初始化"></a>2.1 TM及RM初始化</h2><p>TM和RM（Client端）由业务系统集成，AT模式下，在处理TC（Server端）发过来的请求时，这俩角色发挥着主要作用。所以从GlobalTransactionScanner中两者的初始化开始说起。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127212033165.png" alt="image-20221127212033165"></p><p>启动的时候，会调用GlobalTransactionScanner#initClient()方法，在initClient()中初始化TM和RM。</p><p>TM和RM初始化，主要是注册各种处理器，最终构造一个处理器映射表：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127213129581.png" alt="image-20221127213129581"></p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127213354445.png" alt="image-20221127213354445"></p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127213428347.png" alt="image-20221127213428347"></p><p>RM注册处理器逻辑相同，这里不多展示。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127213557337.png" alt="image-20221127213557337"></p><p>需要关注的是RM初始化时，在注册各种处理器之前还有两个操作：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127214227198.png" alt="image-20221127214227198"></p><p>RM初始化时，先是设置了 ResourceManager 和 TransactionMessageHandler，之后也是如TM初始化一样注册各种处理器，有区别的是注册处理器流程中，RM是注册完三个特有的客户端之后，才执行与TM类似的注册流程。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221127222604783.png" alt="image-20221127222604783"></p><p>真正处理请求的还是靠调用各个处理器中的handler.onRequest()方法，于是问题的关键就很明显了，就在于handler。</p><h2 id="2-2-ResourceManager"><a href="#2-2-ResourceManager" class="headerlink" title="2.2 ResourceManager"></a>2.2 ResourceManager</h2><p>在了解ResourceManager之前，需要先了解下ResourceManagerInbound和ResourceManagerOutbound。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221129230253020.png" alt="image-20221129230253020"></p><p>ResourceManagerInbound是处理接收到TC的请求的，是TC向RM发请求</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221129230822733.png" alt="image-20221129230822733"></p><p>ResourceManagerOutbound是处理流出的消息的，是RM向TC发请求</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221129232244968.png" alt="image-20221129232244968"></p><p>ResourceManager继承了二者，所以既负责向TC发请求，又负责接收从TC来的请求。</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221129234706090.png" alt="image-20221129234706090"></p><p>DefaultResourceManager.get()得到的是一个单例DefaultResourceManager，创建DefaultResourceManager的时候会构建一个分支类型为ResourceManager的一个Map。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-AT模式的特性&quot;&gt;&lt;a href=&quot;#1-AT模式的特性&quot; class=&quot;headerlink&quot; title=&quot;1.AT模式的特性&quot;&gt;&lt;/a&gt;1.AT模式的特性&lt;/h1&gt;&lt;h2 id=&quot;1-1-前提&quot;&gt;&lt;a href=&quot;#1-1-前提&quot; class=&quot;headerlink&quot; title=&quot;1.1 前提&quot;&gt;&lt;/a&gt;1.1 前提&lt;/h2&gt;&lt;p&gt;AT模式生效需要两个前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于支持本地ACID事务的关系型数据库&lt;/li&gt;
&lt;li&gt;Java应用，通过JDBC访问数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-2-整体机制&quot;&gt;&lt;a href=&quot;#1-2-整体机制&quot; class=&quot;headerlink&quot; title=&quot;1.2 整体机制&quot;&gt;&lt;/a&gt;1.2 整体机制&lt;/h2&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="seata" scheme="https://xssdpgy.github.io/tags/seata/"/>
    
    <category term="分布式事务" scheme="https://xssdpgy.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>代理模式——JDK动态代理与CGLib原理及对比分析</title>
    <link href="https://xssdpgy.github.io/2022/10/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8ECGLib%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://xssdpgy.github.io/2022/10/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8ECGLib%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</id>
    <published>2022-10-12T16:05:28.000Z</published>
    <updated>2022-10-25T15:10:58.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>首先回顾下代理模式（Proxy Pattern）的定义：代理模式指为其他对象提供一种代理，以控制这个对象的访问，属于结构型设计模式。其适用于在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端于目标对象之间起到中介的作用。</p><span id="more"></span><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/1085268-20170409105440082-1652546649-1665673852198.jpg"></p><p>代理模式主要分为静态代理和动态代理两种方式，静态代理需要手动创建代理类，代理的目标对象是固定的；动态代理使用反射机制，代理的目标对象是活动的，不需要创建代理类即可给不同的目标随时创建代理。本篇重点探究动态代理的实现。</p><h1 id="2-JDK动态代理"><a href="#2-JDK动态代理" class="headerlink" title="2.JDK动态代理"></a>2.JDK动态代理</h1><p>JDK动态代理采用字节重组，重新生成对象来替代原始对象，以达到动态代理的目的。JDK动态代理生成对象的步骤如下：</p><ol><li>获取被代理对象的引用，并且获取它的所有接口，反射获取。</li><li>JDK动态代理类重新生成一个新的类，同时新的类要实现被代理类实现的所有接口。</li><li>动态生成Java代码，新加的业务逻辑方法由一定的逻辑代码调用（在代码中体现）。</li><li>编译新生成的Java代码<code>.class</code>文件。</li><li>重新加载到JVM中运行。</li></ol><h2 id="2-1-JDK动态代理实现及原理源码解析"><a href="#2-1-JDK动态代理实现及原理源码解析" class="headerlink" title="2.1 JDK动态代理实现及原理源码解析"></a>2.1 JDK动态代理实现及原理源码解析</h2><p>实现一个JDK动态代理，方式为实现<code>java.lang.reflect.InvocationHandler</code>接口，并使用<code>java.lang.reflect.Proxy.newProxyInstance()</code>方法生成代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 要代理的接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 真实调用类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan</span> <span class="keyword">implements</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==张三学习中间件==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JDK代理类生成</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IPerson target;</span><br><span class="line">    <span class="keyword">public</span> IPerson <span class="title function_">getInstance</span><span class="params">(IPerson target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        Class&lt;?&gt; clazz =  target.getClass();</span><br><span class="line">        <span class="keyword">return</span> (IPerson) Proxy.newProxyInstance(clazz.getClassLoader(),clazz.getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(<span class="built_in">this</span>.target,args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事前做好计划&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事后回顾梳理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//把生成的字节码保存到本地磁盘,动态生成的类会保存在工程根目录下的 com/sun/proxy 目录里面</span></span><br><span class="line">            System.setProperty(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="type">IPerson</span> <span class="variable">obj</span> <span class="operator">=</span> (IPerson) <span class="keyword">new</span> <span class="title class_">JdkInvocationHandler</span>().getInstance(<span class="keyword">new</span> <span class="title class_">Zhangsan</span>());</span><br><span class="line">            obj.learn();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下 <code>Proxy.newProxyInstance</code> 里面究竟发生了什么？</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/%E4%BB%A3%E7%90%86%E7%B1%BB%E7%94%9F%E6%88%90%E6%B5%81%E7%A8%8B.jpg"></p><p>结合流程图，在生成字节码的那个地方，也就是 <code>ProxyGenerator.generateProxyClass()</code> 方法里面，通过代码可以看到（自行查阅，篇幅原因，这里不贴代码），里面是用参数  <code>saveGeneratedFiles</code>  来控制是否把生成的字节码保存到本地磁盘。代码中已经设置保存到本地，现在找到刚才生成的<code> $Proxy0.class</code>，反编译打开如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zang.jdkproxy.IPerson;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// super.h 对应的是父类的h变量，也就是Proxy.newProxyInstance方法中的InvocationHandler参数</span></span><br><span class="line">           <span class="comment">// 所以这里实际上就是使用了我们自己写的InvocationHandler实现类的invoke方法</span></span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m2, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m0, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.zang.jdkproxy.IPerson&quot;</span>).getMethod(<span class="string">&quot;learn&quot;</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>$Proxy0</code>类继承了<code>Proxy</code>类，里面有一个跟<code>IPerson</code>一样签名的 <code>learn</code> 方法，方法实现中的<code>super.h.invoke(this, m3, (Object[])null);</code>，super.h 对应的是父类的h变量，也就是<code>Proxy.newProxyInstance</code>方法中的<code>InvocationHandler</code>参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"><span class="comment">//import略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Proxy</span><span class="params">(InvocationHandler h)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalArgumentException</span><br><span class="line">    &#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">        <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>所以这里实际上就是使用了我自己写的<code>InvocationHandler</code>实现类<code>JdkInvocationHandler</code>的<code>invoke</code>方法，当调用 <code>IPerson.learn</code>的时候，其实它是被转发到了<code> JdkInvocationHandler.invoke</code>。至此，整个魔术过程就透明了。</p><h2 id="2-2-手写JDK动态代理"><a href="#2-2-手写JDK动态代理" class="headerlink" title="2.2 手写JDK动态代理"></a>2.2 手写JDK动态代理</h2><p>使用JDK动态代理的类名和方法名定义以及执行思路，下面来进行手写实现。</p><h3 id="创建MyInvocationHandler接口："><a href="#创建MyInvocationHandler接口：" class="headerlink" title="创建MyInvocationHandler接口："></a>创建<code>MyInvocationHandler</code>接口：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建MyProxy类："><a href="#创建MyProxy类：" class="headerlink" title="创建MyProxy类："></a>创建MyProxy类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.StandardJavaFileManager;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己实现的代理类，用来生成字节码文件，并动态加载到JVM中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ln</span> <span class="operator">=</span> <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classLoader 类加载器，用于加载被代理类的类文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaces 被代理类的接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h 自定义的InvocationHandler接口,用于具体代理方法的执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回被代理后的代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(MyClassLoader classLoader, Class&lt;?&gt;[] interfaces, MyInvocationHandler h)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、动态生成源代码.java文件</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> generateSrc(interfaces);</span><br><span class="line">        <span class="comment">//2、Java文件输出磁盘</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> MyProxy.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath + <span class="string">&quot;$Proxy0.java&quot;</span>);</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);</span><br><span class="line">            fw.write(src);</span><br><span class="line">            fw.flush();</span><br><span class="line">            fw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、把生成的.java文件编译成.class文件</span></span><br><span class="line">            <span class="comment">//获取Java编译器</span></span><br><span class="line">            <span class="type">JavaCompiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ToolProvider.getSystemJavaCompiler();</span><br><span class="line">            <span class="comment">//标注Java文件管理器，用来获取Java字节码文件</span></span><br><span class="line">            <span class="type">StandardJavaFileManager</span> <span class="variable">manage</span> <span class="operator">=</span> compiler.getStandardFileManager(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">Iterable</span> <span class="variable">iterable</span> <span class="operator">=</span> manage.getJavaFileObjects(f);</span><br><span class="line">            <span class="comment">//创建task，通过java字节码文件将类信息加载到JVM中</span></span><br><span class="line">            JavaCompiler.<span class="type">CompilationTask</span> <span class="variable">task</span> <span class="operator">=</span> compiler.getTask(<span class="literal">null</span>, manage, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, iterable);</span><br><span class="line">            <span class="comment">//开始执行task</span></span><br><span class="line">            task.call();</span><br><span class="line">            <span class="comment">//关闭管理器</span></span><br><span class="line">            manage.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、编译生成的.class文件加载到JVM中来</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">proxyClass</span> <span class="operator">=</span> classLoader.findClass(<span class="string">&quot;$Proxy0&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">c</span> <span class="operator">=</span> proxyClass.getConstructor(MyInvocationHandler.class);</span><br><span class="line">            f.delete();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、返回字节码重组以后的新的代理对象</span></span><br><span class="line">            <span class="keyword">return</span> c.newInstance(h);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成代理类的源代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateSrc</span><span class="params">(Class&lt;?&gt;[] interfaces)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        sb.append(MyProxy.class.getPackage() + <span class="string">&quot;;&quot;</span> + ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import &quot;</span> + interfaces[<span class="number">0</span>].getName() + <span class="string">&quot;;&quot;</span> + ln);</span><br><span class="line">        sb.append(<span class="string">&quot;import java.lang.reflect.*;&quot;</span> + ln);</span><br><span class="line">        sb.append(<span class="string">&quot;public class $Proxy0 implements &quot;</span> + interfaces[<span class="number">0</span>].getName() + <span class="string">&quot;&#123;&quot;</span> + ln);</span><br><span class="line">        sb.append(<span class="string">&quot;GPInvocationHandler h;&quot;</span> + ln);</span><br><span class="line">        sb.append(<span class="string">&quot;public $Proxy0(GPInvocationHandler h) &#123; &quot;</span> + ln);</span><br><span class="line">        sb.append(<span class="string">&quot;this.h = h;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&#125;&quot;</span> + ln);</span><br><span class="line">        <span class="keyword">for</span> (Method m : interfaces[<span class="number">0</span>].getMethods()) &#123;</span><br><span class="line">            Class&lt;?&gt;[] params = m.getParameterTypes();</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">paramNames</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">paramValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">paramClasses</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> params[i];</span><br><span class="line">                <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> clazz.getName();</span><br><span class="line">                <span class="type">String</span> <span class="variable">paramName</span> <span class="operator">=</span> toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                paramNames.append(type + <span class="string">&quot; &quot;</span> + paramName);</span><br><span class="line">                paramValues.append(paramName);</span><br><span class="line">                paramClasses.append(clazz.getName() + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; params.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    paramNames.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    paramClasses.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    paramValues.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">&quot;public &quot;</span> + m.getReturnType().getName() + <span class="string">&quot; &quot;</span> + m.getName() + <span class="string">&quot;(&quot;</span> + paramNames.toString() + <span class="string">&quot;) &#123;&quot;</span> + ln);</span><br><span class="line">            sb.append(<span class="string">&quot;try&#123;&quot;</span> + ln);</span><br><span class="line">            sb.append(<span class="string">&quot;Method m = &quot;</span> + interfaces[<span class="number">0</span>].getName() + <span class="string">&quot;.class.getMethod(\&quot;&quot;</span> + m.getName() + <span class="string">&quot;\&quot;,new Class[]&#123;&quot;</span> + paramClasses.toString() + <span class="string">&quot;&#125;);&quot;</span> + ln);</span><br><span class="line">            sb.append((hasReturnValue(m.getReturnType()) ? <span class="string">&quot;return &quot;</span> : <span class="string">&quot;&quot;</span>) + getCaseCode(<span class="string">&quot;this.h.invoke(this,m,new Object[]&#123;&quot;</span> + paramValues + <span class="string">&quot;&#125;)&quot;</span>, m.getReturnType()) + <span class="string">&quot;;&quot;</span> + ln);</span><br><span class="line">            sb.append(<span class="string">&quot;&#125;catch(Error _ex) &#123; &#125;&quot;</span>);</span><br><span class="line">            sb.append(<span class="string">&quot;catch(Throwable e)&#123;&quot;</span> + ln);</span><br><span class="line">            sb.append(<span class="string">&quot;throw new UndeclaredThrowableException(e);&quot;</span> + ln);</span><br><span class="line">            sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            sb.append(getReturnEmptyCode(m.getReturnType()));</span><br><span class="line">            sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;&#125;&quot;</span> + ln);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class, Class&gt; mappings = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Class, Class&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        mappings.put(<span class="type">int</span>.class, Integer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getReturnEmptyCode</span><span class="params">(Class&lt;?&gt; returnClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mappings.containsKey(returnClass)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;return 0;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (returnClass == <span class="keyword">void</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;return null;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCaseCode</span><span class="params">(String code, Class&lt;?&gt; returnClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mappings.containsKey(returnClass)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;((&quot;</span> + mappings.get(returnClass).getName() + <span class="string">&quot;)&quot;</span> + code + <span class="string">&quot;).&quot;</span> + returnClass.getSimpleName() + <span class="string">&quot;Value()&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">hasReturnValue</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz != <span class="keyword">void</span>.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toLowerFirstCase</span><span class="params">(String src)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = src.toCharArray();</span><br><span class="line">        chars[<span class="number">0</span>] += <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建类加载器MyClassLoader："><a href="#创建类加载器MyClassLoader：" class="headerlink" title="创建类加载器MyClassLoader："></a>创建类加载器MyClassLoader：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File classPathFile;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassLoader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> MyClassLoader.class.getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line">        <span class="built_in">this</span>.classPathFile = <span class="keyword">new</span> <span class="title class_">File</span>(classPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类名称加载类字节码文件到JVM中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类的Class独享</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> MyClassLoader.class.getPackage().getName() + <span class="string">&quot;.&quot;</span> + name;</span><br><span class="line">        <span class="keyword">if</span>(classPathFile  != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//获取类文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">classFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(classPathFile,name.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(classFile.exists())&#123;</span><br><span class="line">                <span class="comment">//将类文件转化为字节数组</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(classFile);</span><br><span class="line">                    out = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                    <span class="type">byte</span> [] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = in.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                        out.write(buff,<span class="number">0</span>,len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//调用父类方法生成class实例</span></span><br><span class="line">                    <span class="keyword">return</span> defineClass(className,out.toByteArray(),<span class="number">0</span>,out.size());</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现并测试"><a href="#实现并测试" class="headerlink" title="实现并测试"></a>实现并测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 要代理的接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 真实调用类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan</span> <span class="keyword">implements</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==张三学习中间件==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JDK代理类生成</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">MyInvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IPerson target;</span><br><span class="line">    <span class="keyword">public</span> IPerson <span class="title function_">getInstance</span><span class="params">(IPerson target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        Class&lt;?&gt; clazz =  target.getClass();</span><br><span class="line">        <span class="keyword">return</span> (IPerson) MyProxy.newProxyInstance(<span class="keyword">new</span> <span class="title class_">MyClassLoader</span>(),clazz.getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(<span class="built_in">this</span>.target,args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事前做好计划&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事后回顾梳理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CustomInvocationHandler</span> <span class="variable">custom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomInvocationHandler</span>();</span><br><span class="line">        <span class="type">IPerson</span> <span class="variable">zhangsan</span> <span class="operator">=</span> custom.getInstance(<span class="keyword">new</span> <span class="title class_">Zhangsan</span>());</span><br><span class="line">        zhangsan.learn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，手写完成，读者也可自行参照实现。</p><h1 id="3-CGLib动态代理API原理分析"><a href="#3-CGLib动态代理API原理分析" class="headerlink" title="3.CGLib动态代理API原理分析"></a>3.CGLib动态代理API原理分析</h1><h2 id="3-1-CGLib动态代理的使用"><a href="#3-1-CGLib动态代理的使用" class="headerlink" title="3.1 CGLib动态代理的使用"></a>3.1 CGLib动态代理的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCGlib</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(Class&lt;?&gt; clazz)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//相当于Proxy，代理的工具类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> methodProxy.invokeSuper(o,objects);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事前做好计划&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事后回顾梳理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个小细节，CGLib动态代理的目标对象不需要实现任何接口，它是通过动态继承目标对象实现动态代理的，客户端测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Zhangsan</span> <span class="variable">obj</span> <span class="operator">=</span> (Zhangsan) <span class="keyword">new</span> <span class="title class_">CustomCGlib</span>().getInstance(Zhangsan.class);</span><br><span class="line">            obj.learn();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-CGLib动态代理的实现原理"><a href="#3-2-CGLib动态代理的实现原理" class="headerlink" title="3.2 CGLib动态代理的实现原理"></a>3.2 CGLib动态代理的实现原理</h2><p>CGLib动态代理的实现原理又是怎样的呢？可以在客户端测试代码中加上一句代码，将CGLib动态代理后的<code>.class</code>文件写入磁盘，然后反编译来一探究竟，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import net.sf.cglib.core.DebuggingClassWriter;</span></span><br><span class="line"><span class="comment">//使用CGLib的代理类可以将内存中的.class文件写入本地磁盘</span></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY,<span class="string">&quot;E://cglib_proxy_classes&quot;</span>);</span><br><span class="line"><span class="type">Zhangsan</span> <span class="variable">obj</span> <span class="operator">=</span> ···</span><br><span class="line"><span class="comment">//···</span></span><br></pre></td></tr></table></figure><p>重新执行代码，在输出目录下会出现三个<code>.class</code>文件，一个是目标（被代理）类的FastClass，一个是代理类，一个是代理类的FastClass。如图：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20221015172429971.png"></p><p>其中，<code>Zhangsan$$EnhancerByCGLIB$$3d23e0ea.class</code>就是CGLib动态代理生成的代理类，继承了<code>Zhangsan</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zang.cglibproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan$$EnhancerByCGLIB$$3d23e0ea</span> <span class="keyword">extends</span> <span class="title class_">Zhangsan</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="comment">//···</span></span><br><span class="line">   <span class="comment">//传入的MethodInterceptor对象      </span></span><br><span class="line">   <span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0;</span><br><span class="line">   <span class="comment">//目标类的learn方法对象  </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$learn$<span class="number">0</span>$Method;</span><br><span class="line">   <span class="comment">//代理类的learn方法对象  </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$learn$<span class="number">0</span>$Proxy;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] CGLIB$emptyArgs;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//初始化方法，其中部分代码略  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">        CGLIB$emptyArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var0</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zang.cglibproxy.Zhangsan$$EnhancerByCGLIB$$78b38660&quot;</span>);</span><br><span class="line">        Class var1;</span><br><span class="line">        Method[] var10000 = ReflectUtils.findMethods(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;equals&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>)).getDeclaredMethods());</span><br><span class="line">        <span class="comment">//···</span></span><br><span class="line">        <span class="comment">//初始化目标类的learn方法对象</span></span><br><span class="line">        CGLIB$learn$<span class="number">0</span>$Method = ReflectUtils.findMethods(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;learn&quot;</span>, <span class="string">&quot;()V&quot;</span>&#125;, (var1 = Class.forName(<span class="string">&quot;com.zang.cglibproxy.Zhangsan&quot;</span>)).getDeclaredMethods())[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//初始化代理类的learn方法对象</span></span><br><span class="line">        CGLIB$learn$<span class="number">0</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()V&quot;</span>, <span class="string">&quot;learn&quot;</span>, <span class="string">&quot;CGLIB$learn$0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里直接调用Zhangsan#learn</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$learn$<span class="number">0</span>() &#123;</span><br><span class="line">        <span class="built_in">super</span>.learn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">var10000</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="literal">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            var10000 = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这里执行拦截器定义逻辑</span></span><br><span class="line">            var10000.intercept(<span class="built_in">this</span>, CGLIB$learn$<span class="number">0</span>$Method, CGLIB$emptyArgs, CGLIB$learn$<span class="number">0</span>$Proxy);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.learn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用过程为：代理对象调用<code>this.learn</code>方法→调用拦截器→<code>methodProxy.invokeSuper()</code>→<code>CGLIB$learn$0</code>→被代理对象<code>learn</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.sf.cglib.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title class_">Callback</span> &#123;</span><br><span class="line">    Object <span class="title function_">intercept</span><span class="params">(Object var1, Method var2, Object[] var3, MethodProxy var4)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCGlib</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"><span class="comment">//···</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> methodProxy.invokeSuper(o,objects);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodInterceptor</code>拦截器就是由<code>MethodProxy</code>的<code>invokeSuper</code>方法调用代理方法的，因此，<code>MethodProxy</code>类中的代码非常关键，下面分析它具体做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.sf.cglib.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodProxy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Signature sig1;</span><br><span class="line">    <span class="keyword">private</span> Signature sig2;</span><br><span class="line">    <span class="keyword">private</span> MethodProxy.CreateInfo createInfo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">initLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MethodProxy.FastClassInfo fastClassInfo;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.fastClassInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>.initLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.fastClassInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">                    MethodProxy.<span class="type">CreateInfo</span> <span class="variable">ci</span> <span class="operator">=</span> <span class="built_in">this</span>.createInfo;</span><br><span class="line">                    MethodProxy.<span class="type">FastClassInfo</span> <span class="variable">fci</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodProxy</span>.FastClassInfo();</span><br><span class="line">                    <span class="comment">//创建目标类的FastClass对象(在缓存中，则取出；没在，则重新生成)</span></span><br><span class="line">                    fci.f1 = helper(ci, ci.c1);</span><br><span class="line">                    <span class="comment">//创建代理类的FastClass对象</span></span><br><span class="line">                    fci.f2 = helper(ci, ci.c2);</span><br><span class="line">                    <span class="comment">//获取learn方法的索引</span></span><br><span class="line">                    fci.i1 = fci.f1.getIndex(<span class="built_in">this</span>.sig1);</span><br><span class="line">                    <span class="comment">//获取CGLIB$learn$0方法的索引</span></span><br><span class="line">                    fci.i2 = fci.f2.getIndex(<span class="built_in">this</span>.sig2);</span><br><span class="line">                    <span class="built_in">this</span>.fastClassInfo = fci;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invokeSuper</span><span class="params">(Object obj, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//初始化，创建了两个FastClass类对象</span></span><br><span class="line">            <span class="built_in">this</span>.init();</span><br><span class="line">            MethodProxy.<span class="type">FastClassInfo</span> <span class="variable">fci</span> <span class="operator">=</span> <span class="built_in">this</span>.fastClassInfo;</span><br><span class="line">            <span class="comment">//这里将直接调用代理类的CGLIB$learn$0方法，而不是通过反射调用</span></span><br><span class="line">            <span class="comment">//fci.f2：代理类的FastClass对象，fci.i2为CGLIB$learn$0方法对应的索引，obj为当前的代理类对象，args为learn方法的参数列表</span></span><br><span class="line">            <span class="keyword">return</span> fci.f2.invoke(fci.i2, obj, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4.getTargetException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码调用获取代理类对应的FastClass，并执行代理方法。还记得之前生成的三个<code>.class</code>文件吗？<code>Zhangsan$$EnhancerByCGLIB$$78b38660$$FastClassByCGLIB$$a8f9873c.class</code>就是代理类的FastClass，<code>Zhangsan$$FastClassByCGLIB$$bcf7b1f4.class</code>就是被代理类的FastClass。</p><p>CGLib动态代理执行代理方法的效率之所以比JDK高，是因为CGlib采用了FastClass机制，它的原理简单来说就是：为代理类和被代理类各生成一个类，这个类会为代理类或被代理类的方法分配一个index（int类型）；这个index被当作一个入参，FastClass可以直接定位要调用的方法并直接进行调用，省去了反射调用，因此调用效率比JDK动态代理通过反射调用高（并不绝对，还需参考JDK版本及使用场景来说）。下面来反编译一个FastClass。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan$$FastClassByCGLIB$$bcf7b1f4</span> <span class="keyword">extends</span> <span class="title class_">FastClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Zhangsan$$FastClassByCGLIB$$bcf7b1f4(Class var1) &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Signature var1)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var10000</span> <span class="operator">=</span> var1.toString();</span><br><span class="line">        <span class="keyword">switch</span>(var10000.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1574139569</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;learn()V&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//learn方法返回0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1826985398</span>:</span><br><span class="line">            <span class="keyword">if</span> (var10000.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">   <span class="comment">//···</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据index获取方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="type">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="type">Zhangsan</span> <span class="variable">var10000</span> <span class="operator">=</span> (Zhangsan)var2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var10001</span> <span class="operator">=</span> var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="comment">//传入index为0则执行learn方法</span></span><br><span class="line">                var10000.learn();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(var10000.equals(var3[<span class="number">0</span>]));</span><br><span class="line">   <span class="comment">//···           </span></span><br><span class="line">                    </span><br></pre></td></tr></table></figure><p>FastClass并不是跟代理类一起生成的，而是在第一次执行<code>MethodProxy</code>的<code>invoke</code>或<code>invokeSuper</code>方法时生成的，并被放在了缓存中。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>通过上面的分析，相信会对两种动态代理的实现原理有一个深入的认识，总结性比较两者的区别如下：</p><ol><li>JDK动态代理实现了被代理对象的接口，CGLib动态代理继承了被代理对象。</li><li>JDK动态代理和CGLib动态代理都在运行期生成字节码，JDK动态代理直接写Class字节码，CGLib动态代理使用ASM框架写Class字节码。CGLib动态代理实现更复杂，生成代理类比JDK动态代理效率低。</li><li>JDK动态代理调用代理方法是通过反射机制调用的，CGLib动态代理是通过FastClass机制直接调用方法的，CGLib动态代理的执行效率更高。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;首先回顾下代理模式（Proxy Pattern）的定义：代理模式指为其他对象提供一种代理，以控制这个对象的访问，属于结构型设计模式。其适用于在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端于目标对象之间起到中介的作用。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="源码分析" scheme="https://xssdpgy.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="设计模式" scheme="https://xssdpgy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="动态代理" scheme="https://xssdpgy.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot异步方法优化处理提高响应速度</title>
    <link href="https://xssdpgy.github.io/2022/04/21/SpringBoot%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95%E4%BC%98%E5%8C%96%E5%A4%84%E7%90%86%E6%8F%90%E9%AB%98%E5%93%8D%E5%BA%94%E9%80%9F%E5%BA%A6/"/>
    <id>https://xssdpgy.github.io/2022/04/21/SpringBoot%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95%E4%BC%98%E5%8C%96%E5%A4%84%E7%90%86%E6%8F%90%E9%AB%98%E5%93%8D%E5%BA%94%E9%80%9F%E5%BA%A6/</id>
    <published>2022-04-21T02:48:24.000Z</published>
    <updated>2022-09-11T15:43:16.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>日常开发中，对于串行化的任务适当解耦耗时操作和业务逻辑，在保证结果准确性的前提下，使用异步方法适当进行并行化改造，可以提高接口响应速度，提升使用体验。</p><p>如下抽象的串行化工作流程：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220421132246323.png"></p><p>业务查询，首先登记记录<code>record</code>[cost 3s]，之后依次执行<code>searchA</code>[cost 1s]、<code>searchB</code>[cost 2s]、<code>searchC</code>[cost 2s]分别得到变量a、b、c，返回结果<code>fx(a,b,c)</code>[计算耗时可忽略不记]。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zang.async.service.AsyncCaseService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncCaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AsyncCaseService asyncCaseService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/search/sync-test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">syncSearch</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;========test start=========&quot;</span>);</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        asyncCaseService.record();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> asyncCaseService.searchA();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> asyncCaseService.searchB();</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> asyncCaseService.searchC();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a+b+c;</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        log.info(<span class="string">&quot;========test end=========cost time is &#123;&#125; seconds&quot;</span>, Duration.between(start,end).getSeconds());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncCaseServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AsyncCaseService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//模拟业务处理耗时</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//其他方法类似</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2022-04-21 13:32:47.739  INFO 22764 --- [nio-8089-exec-2] com.zang.async.web.AsyncCaseController   : ========test start=========</span><br><span class="line">2022-04-21 13:32:55.762  INFO 22764 --- [nio-8089-exec-2] com.zang.async.web.AsyncCaseController   : ========test end=========cost time is 8 seconds</span><br></pre></td></tr></table></figure><p>经过分析，可以看到三个查询方法可以并行执行，等待都产生结果执行<code>fx(a,b,c)</code>，<code>record</code>方法执行的顺序和完成度不影响结果的返回，可以使用异步任务执行。改造逻辑抽象如下：</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220421134151311.png"></p><p>之后就代码实现展开阐述。</p><h1 id="2-SpringBoot中的异步方法支持"><a href="#2-SpringBoot中的异步方法支持" class="headerlink" title="2.SpringBoot中的异步方法支持"></a>2.SpringBoot中的异步方法支持</h1><p>SpringBoot已经提供了异步方法支持注解，因此不需要我们自己去创建维护线程或者线程池来异步的执行方法。</p><p>主要依靠两个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 使用异步方法时需要提前开启(在启动类上或配置类上)</span></span><br><span class="line"><span class="meta">@Async</span> <span class="comment">// 被async注解修饰的方法由SpringBoot默认线程池(SimpleAsyncTaskExecutor)执行</span></span><br></pre></td></tr></table></figure><h2 id="2-1-获取-有返回值-异步方法的返回值"><a href="#2-1-获取-有返回值-异步方法的返回值" class="headerlink" title="2.1 获取(有返回值)异步方法的返回值"></a>2.1 获取(有返回值)异步方法的返回值</h2><p>对于有返回值的异步方法，可使用<code>java.util.concurrent.Future</code>类及其子类来接收异步方法返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncCaseServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AsyncCaseService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Future&lt;Integer&gt; <span class="title function_">searchA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncResult</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//略</span></span><br></pre></td></tr></table></figure><blockquote><p>无返回值异步方法的异常捕获见3.3。</p></blockquote><h2 id="2-2-异步任务并行控制"><a href="#2-2-异步任务并行控制" class="headerlink" title="2.2 异步任务并行控制"></a>2.2 异步任务并行控制</h2><p>接上节，在对Service中有返回值的方法进行异步改造的同时，业务处理侧需要添加并行控制，使并行的异步都返回结果才进行下一步操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import com.zang.async.service.AsyncCaseService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.time.Instant;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">public class AsyncCaseController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private AsyncCaseService asyncCaseService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/search/async-test&quot;)</span><br><span class="line">    public int asyncSearch() &#123;</span><br><span class="line">        log.info(&quot;========test start=========&quot;);</span><br><span class="line">        Instant start = Instant.now();</span><br><span class="line">        asyncCaseService.record();</span><br><span class="line">        Future&lt;Integer&gt; searchAFuture = asyncCaseService.searchA();</span><br><span class="line">        Future&lt;Integer&gt; searchBFuture = asyncCaseService.searchB();</span><br><span class="line">        Future&lt;Integer&gt; searchCFuture = asyncCaseService.searchC();</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (searchAFuture.isDone() &amp;&amp; searchBFuture.isDone() &amp;&amp; searchCFuture.isDone()) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            if (searchAFuture.isCancelled() || searchBFuture.isCancelled() || searchCFuture.isCancelled()) &#123;</span><br><span class="line">                log.info(&quot;async work has cancelled , break&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int a = 0, b = 0, c = 0;</span><br><span class="line">        try &#123;</span><br><span class="line">            a = searchAFuture.get();</span><br><span class="line">            b = searchBFuture.get();</span><br><span class="line">            c = searchCFuture.get();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int result = a + b + c;</span><br><span class="line">        Instant end = Instant.now();</span><br><span class="line">        log.info(&quot;========test end=========cost time is &#123;&#125; seconds&quot;, Duration.between(start, end).getSeconds());</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2022-04-21 14:23:35.486  INFO 19912 --- [nio-8089-exec-4] com.zang.async.web.AsyncCaseController   : ========test start=========</span><br><span class="line">2022-04-21 14:23:37.516  INFO 19912 --- [nio-8089-exec-4] com.zang.async.web.AsyncCaseController   : ========test end=========cost time is 2 seconds</span><br></pre></td></tr></table></figure><h1 id="3-自定义线程池执行异步方法"><a href="#3-自定义线程池执行异步方法" class="headerlink" title="3.自定义线程池执行异步方法"></a>3.自定义线程池执行异步方法</h1><p><code>@Async</code>使用了线程池<code>org.springframework.core.task.SimpleAsyncTaskExecutor</code>来执行我们的异步方法，实际开发中我们也可以自定义自己的线程池，便于对线程池进行合理配置。</p><h2 id="3-1-自定义线程池"><a href="#3-1-自定义线程池" class="headerlink" title="3.1 自定义线程池"></a>3.1 自定义线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncThreadPoolConfigure</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;asyncThreadPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">asyncThreadPoolTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">4</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">4</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;async-task-executor&quot;</span>);</span><br><span class="line">        executor.setThreadGroupName(<span class="string">&quot;async-task-executor-group&quot;</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">// 所有任务结束后关闭线程池</span></span><br><span class="line">        <span class="comment">//executor.setWaitForTasksToCompleteOnShutdown(true);</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-在-Async注解上指定执行的线程池"><a href="#3-2-在-Async注解上指定执行的线程池" class="headerlink" title="3.2 在@Async注解上指定执行的线程池"></a>3.2 在@Async注解上指定执行的线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async(&quot;asyncThreadPoolTaskExecutor&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;Integer&gt; <span class="title function_">searchA</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//略</span></span><br></pre></td></tr></table></figure><p>以上，自定义线程池执行异步方法即完成。</p><h2 id="3-3-自定义线程池监控"><a href="#3-3-自定义线程池监控" class="headerlink" title="3.3 自定义线程池监控"></a>3.3 自定义线程池监控</h2><p>自定义的线程池配置的参数是否合理往往使人摸不着头脑，实际上，线程池执行器<code>org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor</code>为Spring自带的，在测试中可以创建新执行器，继承该执行器，重写<code>submit</code>方法，对其增加监控，从而查看线程池状态，得到合适的线程池配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonitorThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolTaskExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitor</span><span class="params">()</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;**** getActiveCount==&#123;&#125;,getPoolSize==&#123;&#125;,getLargestPoolSize==&#123;&#125;,getTaskCount==&#123;&#125;,getCompletedTaskCount==&#123;&#125;,getQueue==&#123;&#125; ***&quot;</span>,<span class="built_in">this</span>.getThreadPoolExecutor().getActiveCount(),<span class="built_in">this</span>.getThreadPoolExecutor().getPoolSize(),<span class="built_in">this</span>.getThreadPoolExecutor().getLargestPoolSize(),<span class="built_in">this</span>.getThreadPoolExecutor().getTaskCount(),<span class="built_in">this</span>.getThreadPoolExecutor().getCompletedTaskCount(),<span class="built_in">this</span>.getThreadPoolExecutor().getQueue().size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span> &#123;</span><br><span class="line">        monitor();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在3.1自定义线程池时创建该监控执行器即可。</p><h2 id="3-3-无返回值异步方法的异常捕获"><a href="#3-3-无返回值异步方法的异常捕获" class="headerlink" title="3.3 无返回值异步方法的异常捕获"></a>3.3 无返回值异步方法的异常捕获</h2><p>以实现<code>org.springframework.scheduling.annotation.AsyncConfigurer</code>接口的<code>getAsyncExecutor</code>方法和<code>getAsyncUncaughtExceptionHandler</code>方法改造配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncThreadPoolConfigure</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池创建方法为重写 getAsyncExecutor</span></span><br><span class="line">    <span class="meta">@Bean(&quot;asyncThreadPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">4</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">4</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;async-task-executor&quot;</span>);</span><br><span class="line">        executor.setThreadGroupName(<span class="string">&quot;async-task-executor-group&quot;</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">// 所有任务结束后关闭线程池</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncExceptionHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">AsyncUncaughtExceptionHandler</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUncaughtException</span><span class="params">(Throwable throwable, Method method, Object... obj)</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Exception message is &#123;&#125;&quot;</span>, throwable.getMessage());</span><br><span class="line">            log.error(<span class="string">&quot;Method name is &#123;&#125; &quot;</span>, method.getName());</span><br><span class="line">            <span class="keyword">for</span> (Object param : obj) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Parameter value - &#123;&#125;&quot;</span>, param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>表现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async(&quot;asyncThreadPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">record</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            log.info(<span class="string">&quot;current thread name is &#123;&#125;&quot;</span>,Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;network not connect &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2022-04-21 15:34:14.931  INFO 16596 --- [nio-8089-exec-1] com.zang.async.web.AsyncCaseController   : ========test start=========</span><br><span class="line">2022-04-21 15:34:16.965  INFO 16596 --- [nio-8089-exec-1] com.zang.async.web.AsyncCaseController   : ========test end=========cost time is 2 seconds</span><br><span class="line">2022-04-21 15:34:17.939  INFO 16596 --- [-task-executor1] c.z.async.service.AsyncCaseServiceImpl   : current thread name is async-task-executor1</span><br><span class="line">2022-04-21 15:34:17.940 ERROR 16596 --- [-task-executor1] c.z.a.c.AsyncThreadPoolConfigure         : Exception message is network not connect </span><br><span class="line">2022-04-21 15:34:17.941 ERROR 16596 --- [-task-executor1] c.z.a.c.AsyncThreadPoolConfigure         : Method name is record </span><br></pre></td></tr></table></figure><h1 id="4-一些思考"><a href="#4-一些思考" class="headerlink" title="4.一些思考"></a>4.一些思考</h1><p>异步方法的集成极为方便，可以有效提高接口响应速度，但是使用过程中要注意合理的分析业务逻辑及服务器资源承载能力，不可滥用。</p><p>对于强一致性的业务，需要注意，异步方法执行失败对于前部分的已执行的非异步操作是无影响的，因此在该场景异步并不可靠；</p><p>此外，对于并发量过大的任务，异步线程池的队列缓存也较为消耗服务器资源，需要合理规划，必要时建议采用更为可靠的消息队列等中间件。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;日常开发中，对于串行化的任务适当解耦耗时操作和业务逻辑，在保证结果准确性的前提下，使用异步方法适当进行并行化改造，可以提高接口响应速度，提升使用体验。&lt;/p&gt;
&lt;p&gt;如下抽象的串行化工作流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220421132246323.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;业务查询，首先登记记录&lt;code&gt;record&lt;/code&gt;[cost 3s]，之后依次执行&lt;code&gt;searchA&lt;/code&gt;[cost 1s]、&lt;code&gt;searchB&lt;/code&gt;[cost 2s]、&lt;code&gt;searchC&lt;/code&gt;[cost 2s]分别得到变量a、b、c，返回结果&lt;code&gt;fx(a,b,c)&lt;/code&gt;[计算耗时可忽略不记]。代码如下：&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="异步" scheme="https://xssdpgy.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
    <category term="优化" scheme="https://xssdpgy.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>二进制方式安装k8s集群</title>
    <link href="https://xssdpgy.github.io/2022/03/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/"/>
    <id>https://xssdpgy.github.io/2022/03/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/</id>
    <published>2022-03-30T07:51:45.000Z</published>
    <updated>2022-09-11T15:43:16.282Z</updated>
    
    <content type="html"><![CDATA[<p>使用三台服务器搭建k8s集群，集群服务器地址规划如下：</p><span id="more"></span><table><thead><tr><th>IP</th><th>hostname</th><th>备注</th></tr></thead><tbody><tr><td>192.168.206.128</td><td>master</td><td>主节点</td></tr><tr><td>192.168.206.129</td><td>node1</td><td>从节点</td></tr><tr><td>192.168.206.130</td><td>node2</td><td>从节点</td></tr></tbody></table><h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h1><h2 id="1-1-修改主机名"><a href="#1-1-修改主机名" class="headerlink" title="1.1 修改主机名"></a>1.1 修改主机名</h2><p>master:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure><p>node1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname node1</span><br></pre></td></tr></table></figure><p>node2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname</span><br></pre></td></tr></table></figure><h2 id="1-2-关闭防火墙（all）"><a href="#1-2-关闭防火墙（all）" class="headerlink" title="1.2 关闭防火墙（all）"></a>1.2 关闭防火墙（all）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h2 id="1-3-关闭selinux（all）"><a href="#1-3-关闭selinux（all）" class="headerlink" title="1.3 关闭selinux（all）"></a>1.3 关闭selinux（all）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 # 临时关闭</span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config # 永久关闭</span><br></pre></td></tr></table></figure><h2 id="1-4-关闭swap（all）"><a href="#1-4-关闭swap（all）" class="headerlink" title="1.4 关闭swap（all）"></a>1.4 关闭swap（all）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a <span class="comment"># 临时关闭；关闭swap主要是为了性能考虑</span></span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line">free <span class="comment"># 查看内存，swap为0则为关闭</span></span><br></pre></td></tr></table></figure><h2 id="1-5-将桥接的IPv4流量传递到iptables的链（all）"><a href="#1-5-将桥接的IPv4流量传递到iptables的链（all）" class="headerlink" title="1.5 将桥接的IPv4流量传递到iptables的链（all）"></a>1.5 将桥接的IPv4流量传递到iptables的链（all）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h2 id="1-6-添加主机名与IP对应的关系-master"><a href="#1-6-添加主机名与IP对应的关系-master" class="headerlink" title="1.6 添加主机名与IP对应的关系 ( master )"></a>1.6 添加主机名与IP对应的关系 ( master )</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF </span><br><span class="line">192.168.206.128 master</span><br><span class="line">192.168.206.129 node1</span><br><span class="line">192.168.206.130 node2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="2-准备-cfssl-证书生成工具-master"><a href="#2-准备-cfssl-证书生成工具-master" class="headerlink" title="2.准备 cfssl 证书生成工具 ( master )"></a>2.准备 cfssl 证书生成工具 ( master )</h1><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br><span class="line">chmod +x /usr/bin/cfssl*</span><br></pre></td></tr></table></figure><h2 id="2-1-生成-Etcd-证书-（1）自签证书颁发机构（CA）-创建工作目录"><a href="#2-1-生成-Etcd-证书-（1）自签证书颁发机构（CA）-创建工作目录" class="headerlink" title="2.1 生成 Etcd 证书 （1）自签证书颁发机构（CA） 创建工作目录"></a>2.1 生成 Etcd 证书 （1）自签证书颁发机构（CA） 创建工作目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/TLS/&#123;etcd,k8s&#125;</span><br><span class="line"></span><br><span class="line">cd TLS/etcd</span><br></pre></td></tr></table></figure><h2 id="2-2-自签CA"><a href="#2-2-自签CA" class="headerlink" title="2.2 自签CA"></a>2.2 自签CA</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;www&quot;: &#123;</span><br><span class="line">         &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="line">         &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;etcd CA&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Beijing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="2-3-生成CA证书"><a href="#2-3-生成CA证书" class="headerlink" title="2.3 生成CA证书"></a>2.3 生成CA证书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master etcd]# ls ca*pem  #查看</span><br><span class="line">ca-key.pem  ca.pem</span><br></pre></td></tr></table></figure><h2 id="2-4-使用自签-CA-签发-Etcd-HTTPS-证书-创建证书申请文件：-修改对应的master和node的IP地址"><a href="#2-4-使用自签-CA-签发-Etcd-HTTPS-证书-创建证书申请文件：-修改对应的master和node的IP地址" class="headerlink" title="2.4 使用自签 CA 签发 Etcd HTTPS 证书 创建证书申请文件：(修改对应的master和node的IP地址)"></a>2.4 使用自签 CA 签发 Etcd HTTPS 证书 创建证书申请文件：(修改对应的master和node的IP地址)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; server-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">    &quot;192.168.206.128&quot;,</span><br><span class="line">    &quot;192.168.206.129&quot;,</span><br><span class="line">    &quot;192.168.206.130&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="2-5-生成SERVER证书"><a href="#2-5-生成SERVER证书" class="headerlink" title="2.5 生成SERVER证书"></a>2.5 生成SERVER证书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master etcd]# ls server*pem  #查看</span><br><span class="line">server-key.pem  server.pem</span><br></pre></td></tr></table></figure><h1 id="3-部署etcd集群"><a href="#3-部署etcd集群" class="headerlink" title="3.部署etcd集群"></a>3.部署etcd集群</h1><h2 id="3-1-下载"><a href="#3-1-下载" class="headerlink" title="3.1 下载"></a>3.1 下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址：https://github.com/etcd-io/etcd/releases</span><br><span class="line">版本：3.4.14</span><br></pre></td></tr></table></figure><p>以下在master 上操作，为简化操作，完成后将master 生成的所有文件拷贝到node1 和node2。</p><h2 id="3-2-创建工作目录并解压二进制包"><a href="#3-2-创建工作目录并解压二进制包" class="headerlink" title="3.2 创建工作目录并解压二进制包"></a>3.2 创建工作目录并解压二进制包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; -p</span><br><span class="line">tar zxvf etcd-v3.4.14-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.4.14-linux-amd64/&#123;etcd,etcdctl&#125; /opt/etcd/bin/</span><br></pre></td></tr></table></figure><h2 id="3-3-创建etcd-conf"><a href="#3-3-创建etcd-conf" class="headerlink" title="3.3 创建etcd.conf"></a>3.3 创建etcd.conf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF</span><br><span class="line">#[Member]</span><br><span class="line">ETCD_NAME=&quot;etcd-1&quot;</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.206.128:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.206.128:2379&quot;</span><br><span class="line">#[Clustering]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.206.128:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.206.128:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.206.128:2380,etcd-2=https://192.168.206.129:2380,etcd-3=https://192.168.206.130:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>ETCD_NAME：节点名称，集群中唯一</li><li>ETCD_DATA_DIR：数据目录</li><li>ETCD_LISTEN_PEER_URLS：集群通信监听地址</li><li>ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址</li><li>ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址</li><li>ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址</li><li>ETCD_INITIAL_CLUSTER：集群节点地址</li><li>ETCD_INITIAL_CLUSTER_TOKEN：集群 Token</li><li>ETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new 是新集群，existing 表示加入 已有集群</li></ul><h2 id="3-4-创建etcd-service"><a href="#3-4-创建etcd-service" class="headerlink" title="3.4 创建etcd.service"></a>3.4 创建etcd.service</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span><br><span class="line">ExecStart=/opt/etcd/bin/etcd \</span><br><span class="line">--cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="line">--key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="line">--peer-cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="line">--peer-key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="line">--trusted-ca-file=/opt/etcd/ssl/ca.pem \</span><br><span class="line">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \</span><br><span class="line">--logger=zap</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="3-5-拷贝上一步生成的证书到配置路径"><a href="#3-5-拷贝上一步生成的证书到配置路径" class="headerlink" title="3.5 拷贝上一步生成的证书到配置路径"></a>3.5 拷贝上一步生成的证书到配置路径</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/</span><br></pre></td></tr></table></figure><h2 id="3-6-将master-生成的所有文件拷贝到node1-和node2"><a href="#3-6-将master-生成的所有文件拷贝到node1-和node2" class="headerlink" title="3.6 将master 生成的所有文件拷贝到node1 和node2"></a>3.6 将master 生成的所有文件拷贝到node1 和node2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/etcd/ root@192.168.206.129:/opt/</span><br><span class="line">scp /usr/lib/systemd/system/etcd.service root@192.168.206.129:/usr/lib/systemd/system/</span><br><span class="line"></span><br><span class="line">scp -r /opt/etcd/ root@192.168.206.130:/opt/</span><br><span class="line">scp /usr/lib/systemd/system/etcd.service root@192.168.206.130:/usr/lib/systemd/system/</span><br></pre></td></tr></table></figure><p>分别修改 etcd.conf 配置文件中的节点名称和当前服务器 IP：(node1改为 <code>etcd-2</code>，node2 改为 <code>etcd-3</code>)</p><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308200928926.png"></p><h2 id="3-7-启动并设置开机启动"><a href="#3-7-启动并设置开机启动" class="headerlink" title="3.7 启动并设置开机启动"></a>3.7 启动并设置开机启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 三台同时执行</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl enable etcd</span><br></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=&quot;https://192.168.206.128:2379,https://192.168.206.129:2379,https://192.168.206.130:2379&quot; endpoint health</span><br><span class="line">#可视化展示</span><br><span class="line">/opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=&quot;https://192.168.206.128:2379,https://192.168.206.129:2379,https://192.168.206.130:2379&quot; endpoint status --write-out=table</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308201633156.png"></p><h1 id="4-安装docker（all）"><a href="#4-安装docker（all）" class="headerlink" title="4.安装docker（all）"></a>4.安装docker（all）</h1><h2 id="4-1-下载"><a href="#4-1-下载" class="headerlink" title="4.1 下载"></a>4.1 下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址：https://download.docker.com/linux/static/stable/x86_64/</span><br><span class="line">版本：19.03.9</span><br></pre></td></tr></table></figure><h2 id="4-2-解压及安装"><a href="#4-2-解压及安装" class="headerlink" title="4.2 解压及安装"></a>4.2 解压及安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf docker-19.03.9.tgz </span><br><span class="line">mv docker/* /usr/bin</span><br></pre></td></tr></table></figure><h2 id="4-3-systemd-管理-docker"><a href="#4-3-systemd-管理-docker" class="headerlink" title="4.3 systemd 管理 docker"></a>4.3 systemd 管理 docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="4-4-配置阿里云加速"><a href="#4-4-配置阿里云加速" class="headerlink" title="4.4 配置阿里云加速"></a>4.4 配置阿里云加速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/docker</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="4-5-启动并设置开机启动"><a href="#4-5-启动并设置开机启动" class="headerlink" title="4.5 启动并设置开机启动"></a>4.5 启动并设置开机启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="4-6-查询是否安装成功"><a href="#4-6-查询是否安装成功" class="headerlink" title="4.6 查询是否安装成功"></a>4.6 查询是否安装成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master etcd]# docker -v</span><br><span class="line">Docker version 19.03.9, build 9d988398e7</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308202432364.png"></p><h1 id="5-部署Master-Node（master）"><a href="#5-部署Master-Node（master）" class="headerlink" title="5.部署Master Node（master）"></a>5.部署Master Node（master）</h1><h2 id="5-1-生成-kube-apiserver-证书-自签证书颁发机构（CA）"><a href="#5-1-生成-kube-apiserver-证书-自签证书颁发机构（CA）" class="headerlink" title="5.1 生成 kube-apiserver 证书 自签证书颁发机构（CA）"></a>5.1 生成 kube-apiserver 证书 自签证书颁发机构（CA）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd TLS/k8s</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;kubernetes&quot;: &#123;</span><br><span class="line">         &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="line">         &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="5-2-生成CA证书"><a href="#5-2-生成CA证书" class="headerlink" title="5.2 生成CA证书"></a>5.2 生成CA证书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master k8s]# ls ca*pem  #查看</span><br><span class="line">ca-key.pem  ca.pem</span><br></pre></td></tr></table></figure><h2 id="5-3-使用自签-CA-签发-kube-apiserver-HTTPS-证书-创建证书申请文件"><a href="#5-3-使用自签-CA-签发-kube-apiserver-HTTPS-证书-创建证书申请文件" class="headerlink" title="5.3 使用自签 CA 签发 kube-apiserver HTTPS 证书 创建证书申请文件"></a>5.3 使用自签 CA 签发 kube-apiserver HTTPS 证书 创建证书申请文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; server-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">      &quot;10.0.0.1&quot;,</span><br><span class="line">      &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;192.168.206.128&quot;,</span><br><span class="line">      &quot;192.168.206.129&quot;,</span><br><span class="line">      &quot;192.168.206.130&quot;,</span><br><span class="line">      &quot;192.168.206.131&quot;,</span><br><span class="line">      &quot;kubernetes&quot;,</span><br><span class="line">      &quot;kubernetes.default&quot;,</span><br><span class="line">      &quot;kubernetes.default.svc&quot;,</span><br><span class="line">      &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="line">      &quot;kubernetes.default.svc.cluster.local&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>注：192.168.206.131为预留出的IP。</p><h2 id="5-4-生成SERVER证书"><a href="#5-4-生成SERVER证书" class="headerlink" title="5.4 生成SERVER证书"></a>5.4 生成SERVER证书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master k8s]# ls server*pem  #查看</span><br><span class="line">server-key.pem  server.pem</span><br></pre></td></tr></table></figure><h2 id="5-5-下载k8s安装包并解压"><a href="#5-5-下载k8s安装包并解压" class="headerlink" title="5.5 下载k8s安装包并解压"></a>5.5 下载k8s安装包并解压</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址：https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.18.md#server-binaries</span><br><span class="line">版本：1.18.20 (压缩包名：kubernetes-server-linux-amd64.tar.gz)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125;</span><br><span class="line">tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">cd kubernetes/server/bin</span><br><span class="line">cp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin</span><br><span class="line">cp kubectl /usr/bin/</span><br></pre></td></tr></table></figure><h2 id="5-6-部署kube-apiserver"><a href="#5-6-部署kube-apiserver" class="headerlink" title="5.6 部署kube-apiserver"></a>5.6 部署kube-apiserver</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; EOF</span><br><span class="line">KUBE_APISERVER_OPTS=&quot;--logtostderr=false \\</span><br><span class="line">--v=2 \\</span><br><span class="line">--log-dir=/opt/kubernetes/logs \\</span><br><span class="line">--etcd-servers=https://192.168.206.128:2379,https://192.168.206.129:2379,https://192.168.206.130:2379 \\</span><br><span class="line">--bind-address=192.168.206.128 \\</span><br><span class="line">--secure-port=6443 \\</span><br><span class="line">--advertise-address=192.168.206.128 \\</span><br><span class="line">--allow-privileged=true \\</span><br><span class="line">--service-cluster-ip-range=10.0.0.0/24 \\</span><br><span class="line">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\</span><br><span class="line">--authorization-mode=RBAC,Node \\</span><br><span class="line">--enable-bootstrap-token-auth=true \\</span><br><span class="line">--token-auth-file=/opt/kubernetes/cfg/token.csv \\</span><br><span class="line">--service-node-port-range=30000-32767 \\</span><br><span class="line">--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\</span><br><span class="line">--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\</span><br><span class="line">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\</span><br><span class="line">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\</span><br><span class="line">--client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="line">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span><br><span class="line">--etcd-cafile=/opt/etcd/ssl/ca.pem \\</span><br><span class="line">--etcd-certfile=/opt/etcd/ssl/server.pem \\</span><br><span class="line">--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\</span><br><span class="line">--audit-log-maxage=30 \\</span><br><span class="line">--audit-log-maxbackup=3 \\</span><br><span class="line">--audit-log-maxsize=100 \\</span><br><span class="line">--audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面两个\ \ 第一个是转义符，第二个是换行符，使用转义符是为了使用 EOF 保留换行符。</p><ul><li>–logtostderr：启用日志</li><li>—v：日志等级</li><li>–log-dir：日志目录</li><li>–etcd-servers：etcd 集群地址</li><li>–bind-address：监听地址</li><li>–secure-port：https 安全端口</li><li>–advertise-address：集群通告地址</li><li>–allow-privileged：启用授权</li><li>–service-cluster-ip-range：Service 虚拟 IP 地址段</li><li>–enable-admission-plugins：准入控制模块</li><li>–authorization-mode：认证授权，启用 RBAC 授权和节点自管理</li><li>–enable-bootstrap-token-auth：启用 TLS bootstrap 机制</li><li>–token-auth-file：bootstrap token 文件</li><li>–service-node-port-range：Service nodeport 类型默认分配端口范围</li><li>–kubelet-client-xxx：apiserver 访问 kubelet 客户端证书</li><li>–tls-xxx-file：apiserver https 证书</li><li>–etcd-xxxfile：连接 Etcd 集群证书</li><li>–audit-log-xxx：审计日志</li></ul><h2 id="5-7-把生成的证书拷贝到配置文件中的路径"><a href="#5-7-把生成的证书拷贝到配置文件中的路径" class="headerlink" title="5.7 把生成的证书拷贝到配置文件中的路径"></a>5.7 把生成的证书拷贝到配置文件中的路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/TLS/k8s/ca*pem ~/TLS/k8s/server*pem /opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure><h2 id="5-8-创建上述配置文件中-token-文件"><a href="#5-8-创建上述配置文件中-token-文件" class="headerlink" title="5.8 创建上述配置文件中 token 文件"></a>5.8 创建上述配置文件中 token 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; EOF</span><br><span class="line">c47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,&quot;system:node-bootstrapper&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>格式：token，用户名，UID，用户组 token 也可自行生成替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -c 16 /dev/urandom | od -An -t x | tr -d &#x27; &#x27;</span><br></pre></td></tr></table></figure><h2 id="5-9-systemd-管理-apiserver"><a href="#5-9-systemd-管理-apiserver" class="headerlink" title="5.9 systemd 管理 apiserver"></a>5.9 systemd 管理 apiserver</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-apiserver \$KUBE_APISERVER_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动并设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl enable kube-apiserver</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308204749514.png"></p><h2 id="5-10-授权-kubelet-bootstrap-用户允许请求证书"><a href="#5-10-授权-kubelet-bootstrap-用户允许请求证书" class="headerlink" title="5.10 授权 kubelet-bootstrap 用户允许请求证书"></a>5.10 授权 kubelet-bootstrap 用户允许请求证书</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">--clusterrole=system:node-bootstrapper \</span><br><span class="line">--user=kubelet-bootstrap</span><br></pre></td></tr></table></figure><h2 id="5-11-部署-kube-controller-manager"><a href="#5-11-部署-kube-controller-manager" class="headerlink" title="5.11 部署 kube-controller-manager"></a>5.11 部署 kube-controller-manager</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; EOF</span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--logtostderr=false \\</span><br><span class="line">--v=2 \\</span><br><span class="line">--log-dir=/opt/kubernetes/logs \\</span><br><span class="line">--leader-elect=true \\</span><br><span class="line">--master=127.0.0.1:8080 \\</span><br><span class="line">--bind-address=127.0.0.1 \\</span><br><span class="line">--allocate-node-cidrs=true \\</span><br><span class="line">--cluster-cidr=10.244.0.0/16 \\</span><br><span class="line">--service-cluster-ip-range=10.0.0.0/24 \\</span><br><span class="line">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="line">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\</span><br><span class="line">--root-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="line">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span><br><span class="line">--experimental-cluster-signing-duration=87600h0m0s&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><p>–master：通过本地非安全本地端口 8080 连接 apiserver</p></li><li><p>–leader-elect：当该组件启动多个时，自动选举（HA）</p></li><li><p>–cluster-signing-cert-file&#x2F;–cluster-signing-key-file：自动为 kubelet 颁发证书的 CA，与 apiserver 保持一致</p></li></ul><h2 id="5-12-systemd-管理-controller-manager"><a href="#5-12-systemd-管理-controller-manager" class="headerlink" title="5.12 systemd 管理 controller-manager"></a>5.12 systemd 管理 controller-manager</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-controller-manager \$KUBE_CONTROLLER_MANAGER_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动并设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl enable kube-controller-manager</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308205307195.png"></p><h2 id="5-13-部署-kube-scheduler"><a href="#5-13-部署-kube-scheduler" class="headerlink" title="5.13 部署 kube-scheduler"></a>5.13 部署 kube-scheduler</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; EOF</span><br><span class="line">KUBE_SCHEDULER_OPTS=&quot;--logtostderr=false \</span><br><span class="line">--v=2 \</span><br><span class="line">--log-dir=/opt/kubernetes/logs \</span><br><span class="line">--leader-elect \</span><br><span class="line">--master=127.0.0.1:8080 \</span><br><span class="line">--bind-address=127.0.0.1&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>–master：通过本地非安全本地端口 8080 连接 apiserver</p><p>–leader-elect：当该组件启动多个时，自动选举（HA）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-scheduler \$KUBE_SCHEDULER_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动并设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl enable kube-scheduler</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308205540390.png"></p><h2 id="5-14-查看集群状态"><a href="#5-14-查看集群状态" class="headerlink" title="5.14 查看集群状态"></a>5.14 查看集群状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220308205714311.png"></p><h1 id="6-部署Worker-Node（两个node同步执行）"><a href="#6-部署Worker-Node（两个node同步执行）" class="headerlink" title="6.部署Worker Node（两个node同步执行）"></a>6.部署Worker Node（两个node同步执行）</h1><h2 id="6-1k8s安装包解压安装"><a href="#6-1k8s安装包解压安装" class="headerlink" title="6.1k8s安装包解压安装"></a>6.1k8s安装包解压安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125;</span><br><span class="line">tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">cd kubernetes/server/bin</span><br><span class="line">cp kubelet kube-proxy /opt/kubernetes/bin</span><br><span class="line">cp kubectl /usr/bin/</span><br></pre></td></tr></table></figure><h2 id="6-2-配置kubelet"><a href="#6-2-配置kubelet" class="headerlink" title="6.2 配置kubelet"></a>6.2 配置kubelet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; EOF</span><br><span class="line">KUBELET_OPTS=&quot;--logtostderr=false \\</span><br><span class="line">--v=2 \\</span><br><span class="line">--log-dir=/opt/kubernetes/logs \\</span><br><span class="line">--hostname-override=m1 \\</span><br><span class="line">--network-plugin=cni \\</span><br><span class="line">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\</span><br><span class="line">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\</span><br><span class="line">--config=/opt/kubernetes/cfg/kubelet-config.yml \\</span><br><span class="line">--cert-dir=/opt/kubernetes/ssl \\</span><br><span class="line">--pod-infra-container-image=lizhenliang/pause-amd64:3.0&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>–hostname-override：显示名称，集群中唯一</li><li>–network-plugin：启用CNI</li><li>–kubeconfig：空路径，会自动生成，后面用于连接apiserver</li><li>–bootstrap-kubeconfig：首次启动向apiserver申请证书</li><li>–config：配置参数文件</li><li>–cert-dir：kubelet证书生成目录</li><li>–pod-infra-container-image：管理Pod网络容器的镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kubelet-config.yml &lt;&lt; EOF</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 0.0.0.0</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS:</span><br><span class="line">- 10.0.0.2</span><br><span class="line">clusterDomain: cluster.local </span><br><span class="line">failSwapOn: false</span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: false</span><br><span class="line">  webhook:</span><br><span class="line">    cacheTTL: 2m0s</span><br><span class="line">    enabled: true</span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: /opt/kubernetes/ssl/ca.pem </span><br><span class="line">authorization:</span><br><span class="line">  mode: Webhook</span><br><span class="line">  webhook:</span><br><span class="line">    cacheAuthorizedTTL: 5m0s</span><br><span class="line">    cacheUnauthorizedTTL: 30s</span><br><span class="line">evictionHard:</span><br><span class="line">  imagefs.available: 15%</span><br><span class="line">  memory.available: 100Mi</span><br><span class="line">  nodefs.available: 10%</span><br><span class="line">  nodefs.inodesFree: 5%</span><br><span class="line">maxOpenFiles: 1000000</span><br><span class="line">maxPods: 110</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="6-3-将master一些配置文件拷贝到node节点上"><a href="#6-3-将master一些配置文件拷贝到node节点上" class="headerlink" title="6.3 将master一些配置文件拷贝到node节点上"></a>6.3 将master一些配置文件拷贝到node节点上</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/kubernetes/ssl root@192.168.206.129:/opt/kubernetes</span><br><span class="line">scp -r /opt/kubernetes/ssl root@192.168.206.130:/opt/kubernetes</span><br></pre></td></tr></table></figure><h2 id="6-4-生成bootstrap-kubeconfig文件"><a href="#6-4-生成bootstrap-kubeconfig文件" class="headerlink" title="6.4 生成bootstrap.kubeconfig文件"></a>6.4 生成bootstrap.kubeconfig文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KUBE_APISERVER=&quot;https://192.168.206.128:6443&quot;  # apiserver IP:PORT</span><br><span class="line">TOKEN=&quot;c47ffb939f5ca36231d9e3121a252940&quot;  # 与token.csv里保持一致</span><br></pre></td></tr></table></figure><p>上面两个变量需要根据自己情况设置，赋到脚本对应位置执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=true \</span><br><span class="line">  --server=$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">kubectl config set-credentials &quot;kubelet-bootstrap&quot; \</span><br><span class="line">  --token=$&#123;TOKEN&#125; \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=&quot;kubelet-bootstrap&quot; \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv bootstrap.kubeconfig /opt/kubernetes/cfg</span><br></pre></td></tr></table></figure><h2 id="6-5-systemd管理kubelet"><a href="#6-5-systemd管理kubelet" class="headerlink" title="6.5 systemd管理kubelet"></a>6.5 systemd管理kubelet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kubelet \$KUBELET_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动并设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure><h2 id="6-7-批准kubelet证书申请并加入集群（master执行）"><a href="#6-7-批准kubelet证书申请并加入集群（master执行）" class="headerlink" title="6.7 批准kubelet证书申请并加入集群（master执行）"></a>6.7 批准kubelet证书申请并加入集群（master执行）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看kubelet证书请求</span><br><span class="line">kubectl get csr</span><br><span class="line">NAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION</span><br><span class="line">node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A   6m3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending</span><br><span class="line">node-csr-***</span><br><span class="line"># 批准申请</span><br><span class="line">kubectl certificate approve node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span><br><span class="line">kubectl certificate approve node-csr-***</span><br><span class="line"># 查看节点</span><br><span class="line">kubectl get node</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pictures-jike.oss-cn-beijing.aliyuncs.com/pic_bed/1001990-20220308163707727-1298105212.png"></p><p> 由于网络插件还没有部署，节点会没有准备就绪 NotReady。</p><h2 id="6-8-部署kube-proxy"><a href="#6-8-部署kube-proxy" class="headerlink" title="6.8 部署kube-proxy"></a>6.8 部署kube-proxy</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; EOF</span><br><span class="line">KUBE_PROXY_OPTS=&quot;--logtostderr=false \\</span><br><span class="line">--v=2 \\</span><br><span class="line">--log-dir=/opt/kubernetes/logs \\</span><br><span class="line">--config=/opt/kubernetes/cfg/kube-proxy-config.yml&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/kubernetes/cfg/kube-proxy-config.yml &lt;&lt; EOF</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">bindAddress: 0.0.0.0</span><br><span class="line">metricsBindAddress: 0.0.0.0:10249</span><br><span class="line">clientConnection:</span><br><span class="line">  kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="line">hostnameOverride: node1</span><br><span class="line">clusterCIDR: 10.0.0.0/24</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>hostnameOverride设置对应node机器的hostname。</p><h2 id="6-9-生成kube-proxy-kubeconfig文件（master生成传到node）"><a href="#6-9-生成kube-proxy-kubeconfig文件（master生成传到node）" class="headerlink" title="6.9 生成kube-proxy.kubeconfig文件（master生成传到node）"></a>6.9 生成kube-proxy.kubeconfig文件（master生成传到node）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 切换工作目录</span><br><span class="line">cd TLS/k8s</span><br><span class="line"></span><br><span class="line"># 创建证书请求文件</span><br><span class="line">cat &gt; kube-proxy-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="line">  &quot;hosts&quot;: [],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成证书</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master k8s]# ls kube-proxy*pem</span><br><span class="line">kube-proxy-key.pem  kube-proxy.pem</span><br></pre></td></tr></table></figure><p>将master生成的证书传输到node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /root/TLS/k8s/kube-proxy*pem root@192.168.206.129:/opt/kubernetes/ssl</span><br><span class="line">scp /root/TLS/k8s/kube-proxy*pem root@192.168.206.130:/opt/kubernetes/ssl</span><br></pre></td></tr></table></figure><h2 id="6-10-生成kubeconfig文件"><a href="#6-10-生成kubeconfig文件" class="headerlink" title="6.10 生成kubeconfig文件"></a>6.10 生成kubeconfig文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBE_APISERVER=&quot;https://192.168.206.128:6443&quot;  # apiserver IP:PORT</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=true \</span><br><span class="line">  --server=$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">kubectl config set-credentials kube-proxy \</span><br><span class="line">  --client-certificate=/opt/kubernetes/ssl/kube-proxy.pem \</span><br><span class="line">  --client-key=/opt/kubernetes/ssl/kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=true \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><h2 id="6-11-systemd管理kube-proxy"><a href="#6-11-systemd管理kube-proxy" class="headerlink" title="6.11 systemd管理kube-proxy"></a>6.11 systemd管理kube-proxy</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-proxy \$KUBE_PROXY_OPTS</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>启动并设置开机启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl enable kube-proxy</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220309161608043.png"></p><h1 id="7-部署CNI网络"><a href="#7-部署CNI网络" class="headerlink" title="7.部署CNI网络"></a>7.部署CNI网络</h1><p>下载安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址：https://github.com/containernetworking/plugins/releases</span><br><span class="line">版本：v0.8.6（安装包名：cni-plugins-linux-amd64-v0.8.6.tgz）</span><br></pre></td></tr></table></figure><p>node节点操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/cni/bin</span><br><span class="line">tar zxvf cni-plugins-linux-amd64-v0.8.6.tgz -C /opt/cni/bin</span><br></pre></td></tr></table></figure><p>master节点操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p><img src="https://pictures-blog.oss-cn-beijing.aliyuncs.com/pic_bed/image-20220309162718255.png"></p><p>参考：</p><ol><li><p><a href="https://www.bilibili.com/video/BV1GT4y1A756/?spm_id_from=333.788.recommend_more_video.0">【尚硅谷】Kubernetes（k8s）入门到实战教程丨全新升级完整版</a></p></li><li><p><a href="https://blog.csdn.net/qq_40942490/article/details/114022294">k8s集群 (二进制安装方式)</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用三台服务器搭建k8s集群，集群服务器地址规划如下：&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://xssdpgy.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="k8s" scheme="https://xssdpgy.github.io/tags/k8s/"/>
    
    <category term="安装" scheme="https://xssdpgy.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
